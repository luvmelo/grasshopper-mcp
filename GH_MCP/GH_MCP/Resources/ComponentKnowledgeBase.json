{
  "components": [
    {
      "name": "Surface Curvature",
      "category": "Analysis",
      "subcategory": "Surface",
      "description": "Analyze surface curvature at UV coordinate",
      "inputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Surface to analyze"
        },
        {
          "name": "U",
          "type": "Number",
          "description": "U parameter"
        },
        {
          "name": "V",
          "type": "Number",
          "description": "V parameter"
        }
      ],
      "outputs": [
        {
          "name": "Point",
          "type": "Point",
          "description": "Point at UV"
        },
        {
          "name": "Normal",
          "type": "Vector",
          "description": "Surface normal"
        },
        {
          "name": "K1",
          "type": "Number",
          "description": "Principal curvature 1"
        },
        {
          "name": "K2",
          "type": "Number",
          "description": "Principal curvature 2"
        },
        {
          "name": "Gaussian",
          "type": "Number",
          "description": "Gaussian curvature"
        },
        {
          "name": "Mean",
          "type": "Number",
          "description": "Mean curvature"
        }
      ]
    },
    {
      "name": "Arc",
      "category": "Curve",
      "subcategory": "Primitive",
      "description": "Create an arc from a base plane, radius and angle",
      "inputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Arc plane"
        },
        {
          "name": "Radius",
          "type": "Number",
          "description": "Arc radius"
        },
        {
          "name": "Angle",
          "type": "Number",
          "description": "Arc angle in radians"
        }
      ],
      "outputs": [
        {
          "name": "Arc",
          "type": "Curve",
          "description": "Arc curve"
        }
      ]
    },
    {
      "name": "Circle",
      "category": "Curve",
      "subcategory": "Primitive",
      "description": "Creates a circle from a plane and radius",
      "inputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Circle plane"
        },
        {
          "name": "Radius",
          "type": "Number",
          "description": "Circle radius"
        }
      ],
      "outputs": [
        {
          "name": "Circle",
          "type": "Curve",
          "description": "Circle curve"
        }
      ]
    },
    {
      "name": "Closest Point",
      "category": "Curve",
      "subcategory": "Analysis",
      "description": "Find the closest point on a curve",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Search curve"
        },
        {
          "name": "Point",
          "type": "Point",
          "description": "Sample point"
        }
      ],
      "outputs": [
        {
          "name": "Point",
          "type": "Point",
          "description": "Closest point"
        },
        {
          "name": "Parameter",
          "type": "Number",
          "description": "Curve parameter"
        },
        {
          "name": "Distance",
          "type": "Number",
          "description": "Distance to curve"
        }
      ]
    },
    {
      "name": "Curve Length",
      "category": "Curve",
      "subcategory": "Analysis",
      "description": "Measure the length of a curve",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Curve to measure"
        }
      ],
      "outputs": [
        {
          "name": "Length",
          "type": "Number",
          "description": "Curve length"
        }
      ]
    },
    {
      "name": "Divide Curve",
      "category": "Curve",
      "subcategory": "Division",
      "description": "Divide a curve into equal segments",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Curve to divide"
        },
        {
          "name": "Count",
          "type": "Integer",
          "description": "Number of segments"
        },
        {
          "name": "Kinks",
          "type": "Boolean",
          "description": "Split at kinks",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Division points"
        },
        {
          "name": "Tangents",
          "type": "Vector",
          "description": "Tangent vectors"
        },
        {
          "name": "Parameters",
          "type": "Number",
          "description": "Parameter values"
        }
      ]
    },
    {
      "name": "Evaluate Curve",
      "category": "Curve",
      "subcategory": "Analysis",
      "description": "Evaluate a curve at a specified parameter",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Curve to evaluate"
        },
        {
          "name": "Parameter",
          "type": "Number",
          "description": "Parameter on curve"
        }
      ],
      "outputs": [
        {
          "name": "Point",
          "type": "Point",
          "description": "Point on curve"
        },
        {
          "name": "Tangent",
          "type": "Vector",
          "description": "Tangent vector"
        }
      ]
    },
    {
      "name": "Explode",
      "category": "Curve",
      "subcategory": "Util",
      "description": "Explode a curve into segments",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Curve to explode"
        },
        {
          "name": "Recursive",
          "type": "Boolean",
          "description": "Recursive explode",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Segments",
          "type": "Curve",
          "description": "Curve segments"
        },
        {
          "name": "Vertices",
          "type": "Point",
          "description": "Segment vertices"
        }
      ]
    },
    {
      "name": "Extend Curve",
      "category": "Curve",
      "subcategory": "Util",
      "description": "Extend a curve by a distance or to a point",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Curve to extend"
        },
        {
          "name": "Type",
          "type": "Integer",
          "description": "Extension type"
        },
        {
          "name": "Start",
          "type": "Number",
          "description": "Start extension distance"
        },
        {
          "name": "End",
          "type": "Number",
          "description": "End extension distance"
        }
      ],
      "outputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Extended curve"
        }
      ]
    },
    {
      "name": "Fillet",
      "category": "Curve",
      "subcategory": "Util",
      "description": "Fillet the sharp corners of a curve",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Curve to fillet"
        },
        {
          "name": "Radius",
          "type": "Number",
          "description": "Fillet radius"
        }
      ],
      "outputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Filleted curve"
        }
      ]
    },
    {
      "name": "Interpolate",
      "category": "Curve",
      "subcategory": "Freeform",
      "description": "Create an interpolated curve through points",
      "inputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Interpolation points"
        },
        {
          "name": "Periodic",
          "type": "Boolean",
          "description": "Periodic curve",
          "optional": true
        },
        {
          "name": "Degree",
          "type": "Integer",
          "description": "Curve degree",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Interpolated curve"
        }
      ]
    },
    {
      "name": "Join Curves",
      "category": "Curve",
      "subcategory": "Util",
      "description": "Join a collection of curves",
      "inputs": [
        {
          "name": "Curves",
          "type": "Curve",
          "description": "Curves to join"
        },
        {
          "name": "Preserve",
          "type": "Boolean",
          "description": "Preserve direction",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Curves",
          "type": "Curve",
          "description": "Joined curves"
        }
      ]
    },
    {
      "name": "Line",
      "category": "Curve",
      "subcategory": "Primitive",
      "description": "Create a line between two points",
      "inputs": [
        {
          "name": "Start",
          "type": "Point",
          "description": "Line start point"
        },
        {
          "name": "End",
          "type": "Point",
          "description": "Line end point"
        }
      ],
      "outputs": [
        {
          "name": "Line",
          "type": "Curve",
          "description": "Line curve"
        }
      ]
    },
    {
      "name": "NURBS Curve",
      "category": "Curve",
      "subcategory": "Freeform",
      "description": "Create a NURBS curve from control points",
      "inputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Control points"
        },
        {
          "name": "Degree",
          "type": "Integer",
          "description": "Curve degree",
          "optional": true
        },
        {
          "name": "Periodic",
          "type": "Boolean",
          "description": "Periodic curve",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "NURBS curve"
        }
      ]
    },
    {
      "name": "Offset Curve",
      "category": "Curve",
      "subcategory": "Util",
      "description": "Offset a curve by a distance",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Curve to offset"
        },
        {
          "name": "Distance",
          "type": "Number",
          "description": "Offset distance"
        },
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Offset plane"
        },
        {
          "name": "Corners",
          "type": "Integer",
          "description": "Corner type",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Offset curve"
        }
      ]
    },
    {
      "name": "Polyline",
      "category": "Curve",
      "subcategory": "Primitive",
      "description": "Create a polyline through a series of points",
      "inputs": [
        {
          "name": "Vertices",
          "type": "Point",
          "description": "Polyline vertex points"
        },
        {
          "name": "Closed",
          "type": "Boolean",
          "description": "Close polyline",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Polyline",
          "type": "Curve",
          "description": "Polyline curve"
        }
      ]
    },
    {
      "name": "Rectangle",
      "category": "Curve",
      "subcategory": "Primitive",
      "description": "Create a rectangle on a plane",
      "inputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Rectangle plane"
        },
        {
          "name": "X Size",
          "type": "Number",
          "description": "Size in X direction"
        },
        {
          "name": "Y Size",
          "type": "Number",
          "description": "Size in Y direction"
        },
        {
          "name": "Radius",
          "type": "Number",
          "description": "Corner fillet radius",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Rectangle",
          "type": "Curve",
          "description": "Rectangle curve"
        }
      ]
    },
    {
      "name": "Colour HSL",
      "category": "Display",
      "subcategory": "Colour",
      "description": "Create a color from HSL values",
      "inputs": [
        {
          "name": "Hue",
          "type": "Number",
          "description": "Hue (0-360)"
        },
        {
          "name": "Saturation",
          "type": "Number",
          "description": "Saturation (0-1)"
        },
        {
          "name": "Lightness",
          "type": "Number",
          "description": "Lightness (0-1)"
        }
      ],
      "outputs": [
        {
          "name": "Colour",
          "type": "Colour",
          "description": "HSL color"
        }
      ]
    },
    {
      "name": "Colour RGB",
      "category": "Display",
      "subcategory": "Colour",
      "description": "Create a color from RGB values",
      "inputs": [
        {
          "name": "Red",
          "type": "Number",
          "description": "Red component (0-255)"
        },
        {
          "name": "Green",
          "type": "Number",
          "description": "Green component (0-255)"
        },
        {
          "name": "Blue",
          "type": "Number",
          "description": "Blue component (0-255)"
        }
      ],
      "outputs": [
        {
          "name": "Colour",
          "type": "Colour",
          "description": "RGB color"
        }
      ]
    },
    {
      "name": "Custom Preview",
      "category": "Display",
      "subcategory": "Preview",
      "description": "Preview geometry with custom display attributes",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Geometry to preview"
        },
        {
          "name": "Material",
          "type": "Material",
          "description": "Display material",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Preview",
          "type": "Geometry",
          "description": "Custom preview"
        }
      ]
    },
    {
      "name": "Text",
      "category": "Display",
      "subcategory": "Preview",
      "description": "Create text geometry",
      "inputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Text plane"
        },
        {
          "name": "Text",
          "type": "Text",
          "description": "Text content"
        },
        {
          "name": "Size",
          "type": "Number",
          "description": "Text size",
          "optional": true
        },
        {
          "name": "Font",
          "type": "Text",
          "description": "Font name",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Curves",
          "type": "Curve",
          "description": "Text curves"
        },
        {
          "name": "Planes",
          "type": "Plane",
          "description": "Character planes"
        }
      ]
    },
    {
      "name": "Text Tag",
      "category": "Display",
      "subcategory": "Preview",
      "description": "Create 3D text tag",
      "inputs": [
        {
          "name": "Location",
          "type": "Point",
          "description": "Tag location"
        },
        {
          "name": "Text",
          "type": "Text",
          "description": "Tag text"
        },
        {
          "name": "Size",
          "type": "Number",
          "description": "Text size",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Tag",
          "type": "Geometry",
          "description": "Text tag geometry"
        }
      ]
    },
    {
      "name": "Boolean Difference",
      "category": "Intersect",
      "subcategory": "Solid",
      "description": "Boolean difference operation on breps",
      "inputs": [
        {
          "name": "Breps A",
          "type": "Brep",
          "description": "Breps to subtract from"
        },
        {
          "name": "Breps B",
          "type": "Brep",
          "description": "Breps to subtract"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Brep",
          "description": "Difference result"
        }
      ]
    },
    {
      "name": "Boolean Intersection",
      "category": "Intersect",
      "subcategory": "Solid",
      "description": "Boolean intersection operation on breps",
      "inputs": [
        {
          "name": "Breps A",
          "type": "Brep",
          "description": "First set of breps"
        },
        {
          "name": "Breps B",
          "type": "Brep",
          "description": "Second set of breps"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Brep",
          "description": "Intersection result"
        }
      ]
    },
    {
      "name": "Boolean Union",
      "category": "Intersect",
      "subcategory": "Solid",
      "description": "Boolean union operation on breps",
      "inputs": [
        {
          "name": "Breps A",
          "type": "Brep",
          "description": "First set of breps"
        },
        {
          "name": "Breps B",
          "type": "Brep",
          "description": "Second set of breps"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Brep",
          "description": "Union result"
        }
      ]
    },
    {
      "name": "Brep | Line",
      "category": "Intersect",
      "subcategory": "Mathematical",
      "description": "Find intersection points between a brep and a line",
      "inputs": [
        {
          "name": "Brep",
          "type": "Brep",
          "description": "Brep geometry"
        },
        {
          "name": "Line",
          "type": "Line",
          "description": "Line geometry"
        }
      ],
      "outputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Intersection points"
        },
        {
          "name": "Parameters",
          "type": "Number",
          "description": "Parameters on line"
        }
      ]
    },
    {
      "name": "Contour",
      "category": "Intersect",
      "subcategory": "Mathematical",
      "description": "Create contour curves",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Geometry to contour"
        },
        {
          "name": "Point",
          "type": "Point",
          "description": "Base point"
        },
        {
          "name": "Normal",
          "type": "Vector",
          "description": "Contour direction"
        },
        {
          "name": "Distance",
          "type": "Number",
          "description": "Distance between contours"
        }
      ],
      "outputs": [
        {
          "name": "Curves",
          "type": "Curve",
          "description": "Contour curves"
        },
        {
          "name": "Points",
          "type": "Point",
          "description": "Contour points"
        }
      ]
    },
    {
      "name": "Curve | Curve",
      "category": "Intersect",
      "subcategory": "Mathematical",
      "description": "Find intersection points between two curves",
      "inputs": [
        {
          "name": "Curve A",
          "type": "Curve",
          "description": "First curve"
        },
        {
          "name": "Curve B",
          "type": "Curve",
          "description": "Second curve"
        },
        {
          "name": "Tolerance",
          "type": "Number",
          "description": "Intersection tolerance",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Intersection points"
        },
        {
          "name": "Parameters A",
          "type": "Number",
          "description": "Parameters on curve A"
        },
        {
          "name": "Parameters B",
          "type": "Number",
          "description": "Parameters on curve B"
        }
      ]
    },
    {
      "name": "Absolute",
      "category": "Maths",
      "subcategory": "Operators",
      "description": "Compute the absolute value of a number",
      "inputs": [
        {
          "name": "Value",
          "type": "Number",
          "description": "Input value"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "Absolute value of input"
        }
      ]
    },
    {
      "name": "Addition",
      "category": "Maths",
      "subcategory": "Operators",
      "description": "Mathematical addition",
      "inputs": [
        {
          "name": "A",
          "type": "Number",
          "description": "First number"
        },
        {
          "name": "B",
          "type": "Number",
          "description": "Second number"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "A + B"
        }
      ]
    },
    {
      "name": "Bounds",
      "category": "Maths",
      "subcategory": "Domain",
      "description": "Get the bounds of a list of numbers",
      "inputs": [
        {
          "name": "Numbers",
          "type": "Number",
          "description": "Numbers to bound"
        }
      ],
      "outputs": [
        {
          "name": "Domain",
          "type": "Domain",
          "description": "Numeric bounds"
        }
      ]
    },
    {
      "name": "Ceiling",
      "category": "Maths",
      "subcategory": "Util",
      "description": "Round a number up to the nearest integer",
      "inputs": [
        {
          "name": "Value",
          "type": "Number",
          "description": "Input value"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "Ceiling value"
        }
      ]
    },
    {
      "name": "Cosine",
      "category": "Maths",
      "subcategory": "Trig",
      "description": "Compute the cosine of a value",
      "inputs": [
        {
          "name": "Value",
          "type": "Number",
          "description": "Input value in radians"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "Cosine of input"
        }
      ]
    },
    {
      "name": "Division",
      "category": "Maths",
      "subcategory": "Operators",
      "description": "Mathematical division",
      "inputs": [
        {
          "name": "A",
          "type": "Number",
          "description": "Dividend"
        },
        {
          "name": "B",
          "type": "Number",
          "description": "Divisor"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "A ÷ B"
        }
      ]
    },
    {
      "name": "Domain",
      "category": "Maths",
      "subcategory": "Domain",
      "description": "Create a numeric domain",
      "inputs": [
        {
          "name": "A",
          "type": "Number",
          "description": "Start of domain"
        },
        {
          "name": "B",
          "type": "Number",
          "description": "End of domain"
        }
      ],
      "outputs": [
        {
          "name": "Domain",
          "type": "Domain",
          "description": "Numeric domain"
        }
      ]
    },
    {
      "name": "Floor",
      "category": "Maths",
      "subcategory": "Util",
      "description": "Round a number down to the nearest integer",
      "inputs": [
        {
          "name": "Value",
          "type": "Number",
          "description": "Input value"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "Floor value"
        }
      ]
    },
    {
      "name": "Logarithm",
      "category": "Maths",
      "subcategory": "Operators",
      "description": "Compute the natural logarithm of a number",
      "inputs": [
        {
          "name": "Value",
          "type": "Number",
          "description": "Input value"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "Natural logarithm of input"
        }
      ]
    },
    {
      "name": "Modulus",
      "category": "Maths",
      "subcategory": "Operators",
      "description": "Calculate the remainder after division",
      "inputs": [
        {
          "name": "A",
          "type": "Number",
          "description": "Dividend"
        },
        {
          "name": "B",
          "type": "Number",
          "description": "Divisor"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "A modulo B"
        }
      ]
    },
    {
      "name": "Multiplication",
      "category": "Maths",
      "subcategory": "Operators",
      "description": "Mathematical multiplication",
      "inputs": [
        {
          "name": "A",
          "type": "Number",
          "description": "First number"
        },
        {
          "name": "B",
          "type": "Number",
          "description": "Second number"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "A × B"
        }
      ]
    },
    {
      "name": "Power",
      "category": "Maths",
      "subcategory": "Operators",
      "description": "Raise a number to a power",
      "inputs": [
        {
          "name": "Base",
          "type": "Number",
          "description": "Base number"
        },
        {
          "name": "Exponent",
          "type": "Number",
          "description": "Exponent"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "Base raised to exponent"
        }
      ]
    },
    {
      "name": "Random",
      "category": "Maths",
      "subcategory": "Util",
      "description": "Generate random numbers",
      "inputs": [
        {
          "name": "Range",
          "type": "Domain",
          "description": "Number range"
        },
        {
          "name": "Count",
          "type": "Integer",
          "description": "Number of values"
        },
        {
          "name": "Seed",
          "type": "Integer",
          "description": "Random seed",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Random",
          "type": "Number",
          "description": "Random numbers"
        }
      ]
    },
    {
      "name": "Remap Numbers",
      "category": "Maths",
      "subcategory": "Domain",
      "description": "Remap numbers from one domain to another",
      "inputs": [
        {
          "name": "Value",
          "type": "Number",
          "description": "Value to remap"
        },
        {
          "name": "Source",
          "type": "Domain",
          "description": "Source domain"
        },
        {
          "name": "Target",
          "type": "Domain",
          "description": "Target domain"
        }
      ],
      "outputs": [
        {
          "name": "Mapped",
          "type": "Number",
          "description": "Remapped value"
        },
        {
          "name": "Clipped",
          "type": "Number",
          "description": "Clipped value"
        }
      ]
    },
    {
      "name": "Round",
      "category": "Maths",
      "subcategory": "Util",
      "description": "Round a number to the nearest integer",
      "inputs": [
        {
          "name": "Value",
          "type": "Number",
          "description": "Input value"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "Rounded value"
        }
      ]
    },
    {
      "name": "Sine",
      "category": "Maths",
      "subcategory": "Trig",
      "description": "Compute the sine of a value",
      "inputs": [
        {
          "name": "Value",
          "type": "Number",
          "description": "Input value in radians"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "Sine of input"
        }
      ]
    },
    {
      "name": "Square Root",
      "category": "Maths",
      "subcategory": "Operators",
      "description": "Compute the square root of a number",
      "inputs": [
        {
          "name": "Value",
          "type": "Number",
          "description": "Input value"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "Square root of input"
        }
      ]
    },
    {
      "name": "Subtraction",
      "category": "Maths",
      "subcategory": "Operators",
      "description": "Mathematical subtraction",
      "inputs": [
        {
          "name": "A",
          "type": "Number",
          "description": "First number"
        },
        {
          "name": "B",
          "type": "Number",
          "description": "Second number"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "A - B"
        }
      ]
    },
    {
      "name": "Tangent",
      "category": "Maths",
      "subcategory": "Trig",
      "description": "Compute the tangent of a value",
      "inputs": [
        {
          "name": "Value",
          "type": "Number",
          "description": "Input value in radians"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Number",
          "description": "Tangent of input"
        }
      ]
    },
    {
      "name": "Construct Mesh",
      "category": "Mesh",
      "subcategory": "Primitive",
      "description": "Construct a mesh from vertices, faces and optionally normals and colors",
      "inputs": [
        {
          "name": "Vertices",
          "type": "Point",
          "description": "Mesh vertices"
        },
        {
          "name": "Faces",
          "type": "Integer",
          "description": "Face connectivity"
        },
        {
          "name": "Normals",
          "type": "Vector",
          "description": "Vertex normals",
          "optional": true
        },
        {
          "name": "Colors",
          "type": "Color",
          "description": "Vertex colors",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Constructed mesh"
        }
      ]
    },
    {
      "name": "Convex Hull",
      "category": "Mesh",
      "subcategory": "Triangulation",
      "description": "Create a convex hull of points",
      "inputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Points for hull"
        },
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Hull plane",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Hull",
          "type": "Curve",
          "description": "Convex hull curve"
        },
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Hull mesh"
        }
      ]
    },
    {
      "name": "Deconstruct Mesh",
      "category": "Mesh",
      "subcategory": "Analysis",
      "description": "Deconstruct a mesh into its components",
      "inputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Mesh to deconstruct"
        }
      ],
      "outputs": [
        {
          "name": "Vertices",
          "type": "Point",
          "description": "Mesh vertices"
        },
        {
          "name": "Faces",
          "type": "Integer",
          "description": "Face connectivity"
        },
        {
          "name": "Normals",
          "type": "Vector",
          "description": "Face normals"
        }
      ]
    },
    {
      "name": "Delaunay Triangulation",
      "category": "Mesh",
      "subcategory": "Triangulation",
      "description": "Create a Delaunay triangulation of points",
      "inputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Points to triangulate"
        },
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Triangulation plane",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Delaunay mesh"
        },
        {
          "name": "Edges",
          "type": "Line",
          "description": "Mesh edges"
        }
      ]
    },
    {
      "name": "Mesh",
      "category": "Mesh",
      "subcategory": "Primitive",
      "description": "Create a mesh from vertices and faces",
      "inputs": [
        {
          "name": "Vertices",
          "type": "Point",
          "description": "Mesh vertices"
        },
        {
          "name": "Faces",
          "type": "Integer",
          "description": "Face indices"
        }
      ],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Mesh geometry"
        }
      ]
    },
    {
      "name": "Mesh Area",
      "category": "Mesh",
      "subcategory": "Analysis",
      "description": "Calculate the area of a mesh",
      "inputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Mesh to analyze"
        }
      ],
      "outputs": [
        {
          "name": "Area",
          "type": "Number",
          "description": "Mesh area"
        },
        {
          "name": "Centroid",
          "type": "Point",
          "description": "Area centroid"
        }
      ]
    },
    {
      "name": "Mesh Box",
      "category": "Mesh",
      "subcategory": "Primitive",
      "description": "Create a box mesh",
      "inputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Base plane"
        },
        {
          "name": "X Size",
          "type": "Number",
          "description": "Size in X direction"
        },
        {
          "name": "Y Size",
          "type": "Number",
          "description": "Size in Y direction"
        },
        {
          "name": "Z Size",
          "type": "Number",
          "description": "Size in Z direction"
        }
      ],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Box mesh"
        }
      ]
    },
    {
      "name": "Mesh Join",
      "category": "Mesh",
      "subcategory": "Util",
      "description": "Join multiple meshes into one",
      "inputs": [
        {
          "name": "Meshes",
          "type": "Mesh",
          "description": "Meshes to join"
        }
      ],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Joined mesh"
        }
      ]
    },
    {
      "name": "Mesh Offset",
      "category": "Mesh",
      "subcategory": "Util",
      "description": "Offset a mesh along vertex normals",
      "inputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Mesh to offset"
        },
        {
          "name": "Distance",
          "type": "Number",
          "description": "Offset distance"
        }
      ],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Offset mesh"
        }
      ]
    },
    {
      "name": "Mesh Plane",
      "category": "Mesh",
      "subcategory": "Primitive",
      "description": "Create a planar mesh grid",
      "inputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Base plane"
        },
        {
          "name": "X Size",
          "type": "Number",
          "description": "Size in X direction"
        },
        {
          "name": "Y Size",
          "type": "Number",
          "description": "Size in Y direction"
        },
        {
          "name": "U Count",
          "type": "Integer",
          "description": "Faces in U direction"
        },
        {
          "name": "V Count",
          "type": "Integer",
          "description": "Faces in V direction"
        }
      ],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Planar mesh"
        }
      ]
    },
    {
      "name": "Mesh Sphere",
      "category": "Mesh",
      "subcategory": "Primitive",
      "description": "Create a spherical mesh",
      "inputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Base plane"
        },
        {
          "name": "Radius",
          "type": "Number",
          "description": "Sphere radius"
        },
        {
          "name": "U Count",
          "type": "Integer",
          "description": "Faces in U direction",
          "optional": true
        },
        {
          "name": "V Count",
          "type": "Integer",
          "description": "Faces in V direction",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Spherical mesh"
        }
      ]
    },
    {
      "name": "Mesh Split",
      "category": "Mesh",
      "subcategory": "Util",
      "description": "Split mesh with mesh or plane",
      "inputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Mesh to split"
        },
        {
          "name": "Splitter",
          "type": "Geometry",
          "description": "Splitting geometry"
        }
      ],
      "outputs": [
        {
          "name": "Meshes",
          "type": "Mesh",
          "description": "Split meshes"
        }
      ]
    },
    {
      "name": "Smooth Mesh",
      "category": "Mesh",
      "subcategory": "Util",
      "description": "Smooth a mesh using various algorithms",
      "inputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Mesh to smooth"
        },
        {
          "name": "Strength",
          "type": "Number",
          "description": "Smoothing strength",
          "optional": true
        },
        {
          "name": "Iterations",
          "type": "Integer",
          "description": "Number of iterations",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Smoothed mesh"
        }
      ]
    },
    {
      "name": "Voronoi 3D",
      "category": "Mesh",
      "subcategory": "Triangulation",
      "description": "3D Voronoi diagram from points",
      "inputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Seed points"
        },
        {
          "name": "Box",
          "type": "Box",
          "description": "Bounding box",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Cells",
          "type": "Brep",
          "description": "Voronoi cells"
        }
      ]
    },
    {
      "name": "Boolean Toggle",
      "category": "Params",
      "subcategory": "Input",
      "description": "Boolean (true/false) toggle",
      "inputs": [],
      "outputs": [
        {
          "name": "Boolean",
          "type": "Boolean",
          "description": "Boolean value"
        }
      ],
      "defaultSettings": {
        "value": false
      }
    },
    {
      "name": "Button",
      "category": "Params",
      "subcategory": "Input",
      "description": "A simple button interface",
      "inputs": [],
      "outputs": [
        {
          "name": "Press",
          "type": "Boolean",
          "description": "Button press state"
        }
      ],
      "defaultSettings": {
        "text": "Button",
        "pressed": false
      }
    },
    {
      "name": "Gradient",
      "category": "Params",
      "subcategory": "Input",
      "description": "Create a color gradient",
      "inputs": [
        {
          "name": "L0",
          "type": "Colour",
          "description": "First color",
          "optional": true
        },
        {
          "name": "L1",
          "type": "Colour",
          "description": "Second color",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Gradient",
          "type": "Gradient",
          "description": "Color gradient"
        }
      ]
    },
    {
      "name": "Integer",
      "category": "Params",
      "subcategory": "Primitive",
      "description": "Integer parameter",
      "inputs": [],
      "outputs": [
        {
          "name": "Integer",
          "type": "Integer",
          "description": "Integer value"
        }
      ]
    },
    {
      "name": "MD Slider",
      "category": "Params",
      "subcategory": "Input",
      "description": "Multi-dimensional slider for multiple numeric values",
      "inputs": [],
      "outputs": [
        {
          "name": "Values",
          "type": "Number",
          "description": "Slider values"
        }
      ],
      "defaultSettings": {
        "count": 3,
        "min": 0,
        "max": 1,
        "values": [
          0.5,
          0.5,
          0.5
        ]
      }
    },
    {
      "name": "Number Slider",
      "category": "Params",
      "subcategory": "Input",
      "description": "Slider for numeric input",
      "inputs": [],
      "outputs": [
        {
          "name": "Number",
          "type": "Number",
          "description": "Slider value"
        }
      ],
      "defaultSettings": {
        "min": 0,
        "max": 10,
        "value": 5
      }
    },
    {
      "name": "Panel",
      "category": "Params",
      "subcategory": "Input",
      "description": "Text panel for input or output",
      "inputs": [
        {
          "name": "Input",
          "type": "Any",
          "description": "Any input",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Output",
          "type": "Text",
          "description": "Panel text"
        }
      ]
    },
    {
      "name": "Point",
      "category": "Params",
      "subcategory": "Geometry",
      "description": "Creates a point at the specified coordinates",
      "inputs": [
        {
          "name": "X",
          "type": "Number",
          "description": "X coordinate"
        },
        {
          "name": "Y",
          "type": "Number",
          "description": "Y coordinate"
        },
        {
          "name": "Z",
          "type": "Number",
          "description": "Z coordinate"
        }
      ],
      "outputs": [
        {
          "name": "Pt",
          "type": "Point",
          "description": "Point"
        }
      ]
    },
    {
      "name": "Value List",
      "category": "Params",
      "subcategory": "Input",
      "description": "A list of preset values",
      "inputs": [],
      "outputs": [
        {
          "name": "Value",
          "type": "Any",
          "description": "Selected value"
        }
      ],
      "defaultSettings": {
        "values": [
          "Option 1",
          "Option 2",
          "Option 3"
        ],
        "selected": 0
      }
    },
    {
      "name": "C# Script",
      "category": "Script",
      "subcategory": "Script",
      "description": "Execute C# code in Grasshopper",
      "inputs": [
        {
          "name": "x",
          "type": "Generic",
          "description": "First input variable"
        },
        {
          "name": "y",
          "type": "Generic",
          "description": "Second input variable",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "A",
          "type": "Generic",
          "description": "First output"
        },
        {
          "name": "out",
          "type": "Text",
          "description": "Print output"
        }
      ]
    },
    {
      "name": "Python Script",
      "category": "Script",
      "subcategory": "Script",
      "description": "Execute Python code in Grasshopper",
      "inputs": [
        {
          "name": "x",
          "type": "Generic",
          "description": "First input variable"
        },
        {
          "name": "y",
          "type": "Generic",
          "description": "Second input variable",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "a",
          "type": "Generic",
          "description": "First output"
        },
        {
          "name": "out",
          "type": "Text",
          "description": "Print output"
        }
      ]
    },
    {
      "name": "Cull Pattern",
      "category": "Sets",
      "subcategory": "List",
      "description": "Cull list items according to a pattern",
      "inputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "List to cull"
        },
        {
          "name": "Pattern",
          "type": "Boolean",
          "description": "Cull pattern"
        }
      ],
      "outputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "Culled list"
        }
      ]
    },
    {
      "name": "Dispatch",
      "category": "Sets",
      "subcategory": "List",
      "description": "Dispatch items to multiple lists",
      "inputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "List to dispatch"
        },
        {
          "name": "Pattern",
          "type": "Boolean",
          "description": "Dispatch pattern"
        }
      ],
      "outputs": [
        {
          "name": "List A",
          "type": "Any",
          "description": "First list"
        },
        {
          "name": "List B",
          "type": "Any",
          "description": "Second list"
        }
      ]
    },
    {
      "name": "Entwine",
      "category": "Sets",
      "subcategory": "List",
      "description": "Flatten and combine data streams",
      "inputs": [
        {
          "name": "Branch {0;0}",
          "type": "Any",
          "description": "First branch",
          "optional": true
        },
        {
          "name": "Branch {0;1}",
          "type": "Any",
          "description": "Second branch",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Any",
          "description": "Entwined result"
        }
      ]
    },
    {
      "name": "Flatten Tree",
      "category": "Sets",
      "subcategory": "Tree",
      "description": "Flatten a data tree into a single list",
      "inputs": [
        {
          "name": "Tree",
          "type": "Any",
          "description": "Tree to flatten"
        }
      ],
      "outputs": [
        {
          "name": "Tree",
          "type": "Any",
          "description": "Flattened tree"
        }
      ]
    },
    {
      "name": "Graft Tree",
      "category": "Sets",
      "subcategory": "Tree",
      "description": "Graft a data tree",
      "inputs": [
        {
          "name": "Tree",
          "type": "Any",
          "description": "Tree to graft"
        }
      ],
      "outputs": [
        {
          "name": "Tree",
          "type": "Any",
          "description": "Grafted tree"
        }
      ]
    },
    {
      "name": "List Item",
      "category": "Sets",
      "subcategory": "List",
      "description": "Retrieve a specific item from a list",
      "inputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "List to retrieve from"
        },
        {
          "name": "Index",
          "type": "Integer",
          "description": "Index of item to retrieve"
        },
        {
          "name": "Wrap",
          "type": "Boolean",
          "description": "Wrap index to list bounds",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Item",
          "type": "Any",
          "description": "Item at the specified index"
        }
      ]
    },
    {
      "name": "List Length",
      "category": "Sets",
      "subcategory": "List",
      "description": "Measure the length of a list",
      "inputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "List to measure"
        }
      ],
      "outputs": [
        {
          "name": "Length",
          "type": "Integer",
          "description": "Number of items in the list"
        }
      ]
    },
    {
      "name": "Merge",
      "category": "Sets",
      "subcategory": "Tree",
      "description": "Merge multiple data streams",
      "inputs": [
        {
          "name": "Data 1",
          "type": "Any",
          "description": "First data stream"
        },
        {
          "name": "Data 2",
          "type": "Any",
          "description": "Second data stream"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Any",
          "description": "Merged data"
        }
      ]
    },
    {
      "name": "Range",
      "category": "Sets",
      "subcategory": "Sequence",
      "description": "Create a range of numbers",
      "inputs": [
        {
          "name": "Domain",
          "type": "Domain",
          "description": "Domain of values"
        },
        {
          "name": "Steps",
          "type": "Integer",
          "description": "Number of steps"
        }
      ],
      "outputs": [
        {
          "name": "Range",
          "type": "Number",
          "description": "Range of numbers"
        }
      ]
    },
    {
      "name": "Reverse List",
      "category": "Sets",
      "subcategory": "List",
      "description": "Reverse the order of a list",
      "inputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "List to reverse"
        }
      ],
      "outputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "Reversed list"
        }
      ]
    },
    {
      "name": "Series",
      "category": "Sets",
      "subcategory": "Sequence",
      "description": "Create a series of numbers",
      "inputs": [
        {
          "name": "Start",
          "type": "Number",
          "description": "First number in the series"
        },
        {
          "name": "Step",
          "type": "Number",
          "description": "Step size between numbers"
        },
        {
          "name": "Count",
          "type": "Integer",
          "description": "Number of values"
        }
      ],
      "outputs": [
        {
          "name": "Series",
          "type": "Number",
          "description": "Series of numbers"
        }
      ]
    },
    {
      "name": "Shuffle List",
      "category": "Sets",
      "subcategory": "List",
      "description": "Randomly shuffle a list",
      "inputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "List to shuffle"
        },
        {
          "name": "Seed",
          "type": "Integer",
          "description": "Random seed",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "Shuffled list"
        }
      ]
    },
    {
      "name": "Simplify Tree",
      "category": "Sets",
      "subcategory": "Tree",
      "description": "Simplify a data tree by removing excessive branching",
      "inputs": [
        {
          "name": "Tree",
          "type": "Any",
          "description": "Tree to simplify"
        }
      ],
      "outputs": [
        {
          "name": "Tree",
          "type": "Any",
          "description": "Simplified tree"
        }
      ]
    },
    {
      "name": "Sort List",
      "category": "Sets",
      "subcategory": "List",
      "description": "Sort a list of values",
      "inputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "List to sort"
        },
        {
          "name": "Keys",
          "type": "Any",
          "description": "Sort keys",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "Sorted list"
        },
        {
          "name": "Indices",
          "type": "Integer",
          "description": "Sort indices"
        }
      ]
    },
    {
      "name": "Split List",
      "category": "Sets",
      "subcategory": "List",
      "description": "Split a list into smaller lists",
      "inputs": [
        {
          "name": "List",
          "type": "Any",
          "description": "List to split"
        },
        {
          "name": "Index",
          "type": "Integer",
          "description": "Split index"
        }
      ],
      "outputs": [
        {
          "name": "List A",
          "type": "Any",
          "description": "First part of list"
        },
        {
          "name": "List B",
          "type": "Any",
          "description": "Second part of list"
        }
      ]
    },
    {
      "name": "Weave",
      "category": "Sets",
      "subcategory": "List",
      "description": "Weave multiple lists together",
      "inputs": [
        {
          "name": "Stream A",
          "type": "Any",
          "description": "First stream"
        },
        {
          "name": "Stream B",
          "type": "Any",
          "description": "Second stream"
        },
        {
          "name": "Pattern",
          "type": "Text",
          "description": "Weave pattern",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Weave",
          "type": "Any",
          "description": "Woven result"
        }
      ]
    },
    {
      "name": "SubD Control Polygon",
      "category": "SubD",
      "subcategory": "Util",
      "description": "Extract control polygon from SubD",
      "inputs": [
        {
          "name": "SubD",
          "type": "SubD",
          "description": "Subdivision surface"
        }
      ],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Control polygon mesh"
        }
      ]
    },
    {
      "name": "SubD Edge Tags",
      "category": "SubD",
      "subcategory": "Util",
      "description": "Set edge tags for subdivision surface",
      "inputs": [
        {
          "name": "SubD",
          "type": "SubD",
          "description": "Subdivision surface"
        },
        {
          "name": "Edges",
          "type": "Integer",
          "description": "Edge indices"
        },
        {
          "name": "Tags",
          "type": "Integer",
          "description": "Tag values"
        }
      ],
      "outputs": [
        {
          "name": "SubD",
          "type": "SubD",
          "description": "Tagged subdivision surface"
        }
      ]
    },
    {
      "name": "SubD From Mesh",
      "category": "SubD",
      "subcategory": "Primitive",
      "description": "Create a subdivision surface from a mesh",
      "inputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Input mesh"
        },
        {
          "name": "Creases",
          "type": "Number",
          "description": "Crease values",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "SubD",
          "type": "SubD",
          "description": "Subdivision surface"
        }
      ]
    },
    {
      "name": "SubD Subdivide",
      "category": "SubD",
      "subcategory": "Util",
      "description": "Subdivide a SubD surface",
      "inputs": [
        {
          "name": "SubD",
          "type": "SubD",
          "description": "Subdivision surface"
        },
        {
          "name": "Level",
          "type": "Integer",
          "description": "Subdivision level"
        }
      ],
      "outputs": [
        {
          "name": "SubD",
          "type": "SubD",
          "description": "Subdivided surface"
        }
      ]
    },
    {
      "name": "Boundary Surfaces",
      "category": "Surface",
      "subcategory": "Freeform",
      "description": "Creates boundary surfaces from curves",
      "inputs": [
        {
          "name": "Curves",
          "type": "Curve",
          "description": "Input curves"
        }
      ],
      "outputs": [
        {
          "name": "Surfaces",
          "type": "Surface",
          "description": "Boundary surfaces"
        }
      ]
    },
    {
      "name": "Box",
      "category": "Surface",
      "subcategory": "Primitive",
      "description": "Creates a box from a base plane and dimensions",
      "inputs": [
        {
          "name": "Base",
          "type": "Plane",
          "description": "Base plane"
        },
        {
          "name": "X Size",
          "type": "Number",
          "description": "Size in X direction"
        },
        {
          "name": "Y Size",
          "type": "Number",
          "description": "Size in Y direction"
        },
        {
          "name": "Z Size",
          "type": "Number",
          "description": "Size in Z direction"
        }
      ],
      "outputs": [
        {
          "name": "Box",
          "type": "Brep",
          "description": "Box geometry"
        }
      ]
    },
    {
      "name": "Cone",
      "category": "Surface",
      "subcategory": "Primitive",
      "description": "Create a cone",
      "inputs": [
        {
          "name": "Base",
          "type": "Plane",
          "description": "Base plane"
        },
        {
          "name": "Radius",
          "type": "Number",
          "description": "Base radius"
        },
        {
          "name": "Height",
          "type": "Number",
          "description": "Cone height"
        }
      ],
      "outputs": [
        {
          "name": "Cone",
          "type": "Brep",
          "description": "Cone geometry"
        }
      ]
    },
    {
      "name": "Cylinder",
      "category": "Surface",
      "subcategory": "Primitive",
      "description": "Create a cylinder",
      "inputs": [
        {
          "name": "Base",
          "type": "Plane",
          "description": "Base plane"
        },
        {
          "name": "Radius",
          "type": "Number",
          "description": "Cylinder radius"
        },
        {
          "name": "Height",
          "type": "Number",
          "description": "Cylinder height"
        }
      ],
      "outputs": [
        {
          "name": "Cylinder",
          "type": "Brep",
          "description": "Cylinder geometry"
        }
      ]
    },
    {
      "name": "Evaluate Surface",
      "category": "Surface",
      "subcategory": "Analysis",
      "description": "Evaluate a surface at UV parameters",
      "inputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Surface to evaluate"
        },
        {
          "name": "Point",
          "type": "Point",
          "description": "UV parameter point"
        }
      ],
      "outputs": [
        {
          "name": "Point",
          "type": "Point",
          "description": "Point on surface"
        },
        {
          "name": "Normal",
          "type": "Vector",
          "description": "Surface normal"
        }
      ]
    },
    {
      "name": "Extrude",
      "category": "Surface",
      "subcategory": "Freeform",
      "description": "Extrudes curves or surfaces",
      "inputs": [
        {
          "name": "Base",
          "type": "Geometry",
          "description": "Base geometry"
        },
        {
          "name": "Direction",
          "type": "Vector",
          "description": "Extrusion direction"
        },
        {
          "name": "Distance",
          "type": "Number",
          "description": "Extrusion distance"
        }
      ],
      "outputs": [
        {
          "name": "Result",
          "type": "Brep",
          "description": "Extruded geometry"
        }
      ]
    },
    {
      "name": "Isocurve",
      "category": "Surface",
      "subcategory": "Analysis",
      "description": "Extract isocurves from a surface",
      "inputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Surface"
        },
        {
          "name": "Direction",
          "type": "Integer",
          "description": "0=U, 1=V"
        },
        {
          "name": "Parameter",
          "type": "Number",
          "description": "Parameter value"
        }
      ],
      "outputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Isocurve"
        }
      ]
    },
    {
      "name": "Isotrim",
      "category": "Surface",
      "subcategory": "Util",
      "description": "Extract an isoparametric subset of a surface",
      "inputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Surface to trim"
        },
        {
          "name": "Domain U",
          "type": "Domain",
          "description": "U parameter domain"
        },
        {
          "name": "Domain V",
          "type": "Domain",
          "description": "V parameter domain"
        }
      ],
      "outputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Trimmed surface"
        }
      ]
    },
    {
      "name": "Loft",
      "category": "Surface",
      "subcategory": "Freeform",
      "description": "Create a lofted surface through curves",
      "inputs": [
        {
          "name": "Curves",
          "type": "Curve",
          "description": "Section curves"
        },
        {
          "name": "Options",
          "type": "Integer",
          "description": "Loft options",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Loft",
          "type": "Brep",
          "description": "Lofted surface"
        }
      ]
    },
    {
      "name": "Offset Surface",
      "category": "Surface",
      "subcategory": "Util",
      "description": "Offset a surface by a distance",
      "inputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Surface to offset"
        },
        {
          "name": "Distance",
          "type": "Number",
          "description": "Offset distance"
        }
      ],
      "outputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Offset surface"
        }
      ]
    },
    {
      "name": "Patch",
      "category": "Surface",
      "subcategory": "Freeform",
      "description": "Create a patch surface from curves and points",
      "inputs": [
        {
          "name": "Curves",
          "type": "Curve",
          "description": "Boundary curves",
          "optional": true
        },
        {
          "name": "Points",
          "type": "Point",
          "description": "Interior points",
          "optional": true
        },
        {
          "name": "U Spans",
          "type": "Integer",
          "description": "Spans in U direction",
          "optional": true
        },
        {
          "name": "V Spans",
          "type": "Integer",
          "description": "Spans in V direction",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Patch surface"
        }
      ]
    },
    {
      "name": "Plane Surface",
      "category": "Surface",
      "subcategory": "Primitive",
      "description": "Create a rectangular surface on a plane",
      "inputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Base plane"
        },
        {
          "name": "X Size",
          "type": "Number",
          "description": "Size in X direction"
        },
        {
          "name": "Y Size",
          "type": "Number",
          "description": "Size in Y direction"
        }
      ],
      "outputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Rectangular surface"
        }
      ]
    },
    {
      "name": "Revolve",
      "category": "Surface",
      "subcategory": "Freeform",
      "description": "Revolve a curve around an axis",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Profile curve"
        },
        {
          "name": "Axis",
          "type": "Line",
          "description": "Axis of revolution"
        },
        {
          "name": "Angle",
          "type": "Number",
          "description": "Revolution angle",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Brep",
          "type": "Brep",
          "description": "Revolved surface"
        }
      ]
    },
    {
      "name": "Sphere",
      "category": "Surface",
      "subcategory": "Primitive",
      "description": "Creates a sphere from a base plane and radius",
      "inputs": [
        {
          "name": "Base",
          "type": "Plane",
          "description": "Base plane"
        },
        {
          "name": "Radius",
          "type": "Number",
          "description": "Sphere radius"
        }
      ],
      "outputs": [
        {
          "name": "Sphere",
          "type": "Brep",
          "description": "Sphere geometry"
        }
      ]
    },
    {
      "name": "Surface Closest Point",
      "category": "Surface",
      "subcategory": "Analysis",
      "description": "Find the closest point on a surface",
      "inputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Search surface"
        },
        {
          "name": "Point",
          "type": "Point",
          "description": "Sample point"
        }
      ],
      "outputs": [
        {
          "name": "Point",
          "type": "Point",
          "description": "Closest point"
        },
        {
          "name": "UV Point",
          "type": "Point",
          "description": "UV parameters"
        },
        {
          "name": "Distance",
          "type": "Number",
          "description": "Distance to surface"
        }
      ]
    },
    {
      "name": "Surface Split",
      "category": "Surface",
      "subcategory": "Util",
      "description": "Split surface with curves",
      "inputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Surface to split"
        },
        {
          "name": "Curves",
          "type": "Curve",
          "description": "Splitting curves"
        }
      ],
      "outputs": [
        {
          "name": "Surfaces",
          "type": "Surface",
          "description": "Split surfaces"
        }
      ]
    },
    {
      "name": "Surface from Points",
      "category": "Surface",
      "subcategory": "Freeform",
      "description": "Create a surface from a grid of points",
      "inputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Grid of points"
        },
        {
          "name": "U Count",
          "type": "Integer",
          "description": "Number of points in U direction"
        },
        {
          "name": "V Count",
          "type": "Integer",
          "description": "Number of points in V direction"
        }
      ],
      "outputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Interpolated surface"
        }
      ]
    },
    {
      "name": "Sweep 1",
      "category": "Surface",
      "subcategory": "Freeform",
      "description": "Sweep a cross-section along a rail curve",
      "inputs": [
        {
          "name": "Rail",
          "type": "Curve",
          "description": "Rail curve"
        },
        {
          "name": "Cross Sections",
          "type": "Curve",
          "description": "Cross-section curves"
        }
      ],
      "outputs": [
        {
          "name": "Brep",
          "type": "Brep",
          "description": "Swept surface"
        }
      ]
    },
    {
      "name": "Sweep 2",
      "category": "Surface",
      "subcategory": "Freeform",
      "description": "Sweep a cross-section along two rail curves",
      "inputs": [
        {
          "name": "Rail 1",
          "type": "Curve",
          "description": "First rail curve"
        },
        {
          "name": "Rail 2",
          "type": "Curve",
          "description": "Second rail curve"
        },
        {
          "name": "Cross Sections",
          "type": "Curve",
          "description": "Cross-section curves"
        }
      ],
      "outputs": [
        {
          "name": "Brep",
          "type": "Brep",
          "description": "Swept surface"
        }
      ]
    },
    {
      "name": "Voronoi",
      "category": "Surface",
      "subcategory": "Triangulation",
      "description": "Creates a Voronoi diagram from points",
      "inputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Input points"
        },
        {
          "name": "Radius",
          "type": "Number",
          "description": "Cell radius",
          "optional": true
        },
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Base plane",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Cells",
          "type": "Curve",
          "description": "Voronoi cells"
        },
        {
          "name": "Vertices",
          "type": "Point",
          "description": "Voronoi vertices"
        }
      ]
    },
    {
      "name": "Linear Array",
      "category": "Transform",
      "subcategory": "Array",
      "description": "Create a linear array of objects",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Geometry to array"
        },
        {
          "name": "Direction",
          "type": "Vector",
          "description": "Array direction"
        },
        {
          "name": "Count",
          "type": "Integer",
          "description": "Number of copies"
        }
      ],
      "outputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Array geometry"
        }
      ]
    },
    {
      "name": "Mirror",
      "category": "Transform",
      "subcategory": "Euclidean",
      "description": "Mirror objects across a plane",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Geometry to mirror"
        },
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Mirror plane"
        }
      ],
      "outputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Mirrored geometry"
        },
        {
          "name": "Transform",
          "type": "Transform",
          "description": "Transformation data"
        }
      ]
    },
    {
      "name": "Move",
      "category": "Transform",
      "subcategory": "Euclidean",
      "description": "Translate (move) objects along a vector",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Base geometry"
        },
        {
          "name": "Motion",
          "type": "Vector",
          "description": "Translation vector"
        }
      ],
      "outputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Translated geometry"
        },
        {
          "name": "Transform",
          "type": "Transform",
          "description": "Transformation data"
        }
      ]
    },
    {
      "name": "Orient",
      "category": "Transform",
      "subcategory": "Euclidean",
      "description": "Orient objects from one plane to another",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Geometry to orient"
        },
        {
          "name": "Source",
          "type": "Plane",
          "description": "Source plane"
        },
        {
          "name": "Target",
          "type": "Plane",
          "description": "Target plane"
        }
      ],
      "outputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Oriented geometry"
        },
        {
          "name": "Transform",
          "type": "Transform",
          "description": "Transformation data"
        }
      ]
    },
    {
      "name": "Polar Array",
      "category": "Transform",
      "subcategory": "Array",
      "description": "Create a polar array of objects",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Geometry to array"
        },
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Array plane"
        },
        {
          "name": "Count",
          "type": "Integer",
          "description": "Number of copies"
        },
        {
          "name": "Angle",
          "type": "Number",
          "description": "Total angle",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Array geometry"
        }
      ]
    },
    {
      "name": "Rectangular Array",
      "category": "Transform",
      "subcategory": "Array",
      "description": "Create a rectangular array of objects",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Geometry to array"
        },
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Array plane"
        },
        {
          "name": "Size X",
          "type": "Number",
          "description": "Spacing in X direction"
        },
        {
          "name": "Size Y",
          "type": "Number",
          "description": "Spacing in Y direction"
        },
        {
          "name": "Count X",
          "type": "Integer",
          "description": "Count in X direction"
        },
        {
          "name": "Count Y",
          "type": "Integer",
          "description": "Count in Y direction"
        }
      ],
      "outputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Array geometry"
        }
      ]
    },
    {
      "name": "Rotate",
      "category": "Transform",
      "subcategory": "Euclidean",
      "description": "Rotate objects around an axis",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Base geometry"
        },
        {
          "name": "Angle",
          "type": "Number",
          "description": "Rotation angle in radians"
        },
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Rotation plane"
        }
      ],
      "outputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Rotated geometry"
        },
        {
          "name": "Transform",
          "type": "Transform",
          "description": "Transformation data"
        }
      ]
    },
    {
      "name": "Scale",
      "category": "Transform",
      "subcategory": "Euclidean",
      "description": "Scale objects uniformly or non-uniformly",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Base geometry"
        },
        {
          "name": "Center",
          "type": "Point",
          "description": "Center of scaling"
        },
        {
          "name": "Factor",
          "type": "Number",
          "description": "Scale factor"
        }
      ],
      "outputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Scaled geometry"
        },
        {
          "name": "Transform",
          "type": "Transform",
          "description": "Transformation data"
        }
      ]
    },
    {
      "name": "Data Dam",
      "category": "Util",
      "subcategory": "Data",
      "description": "Control data flow with manual update",
      "inputs": [
        {
          "name": "Data",
          "type": "Generic",
          "description": "Input data"
        }
      ],
      "outputs": [
        {
          "name": "Data",
          "type": "Generic",
          "description": "Output data"
        }
      ]
    },
    {
      "name": "Data Recorder",
      "category": "Util",
      "subcategory": "Data",
      "description": "Record data history",
      "inputs": [
        {
          "name": "Data",
          "type": "Generic",
          "description": "Data to record"
        },
        {
          "name": "Record",
          "type": "Boolean",
          "description": "Record trigger"
        },
        {
          "name": "Clear",
          "type": "Boolean",
          "description": "Clear history"
        }
      ],
      "outputs": [
        {
          "name": "History",
          "type": "Generic",
          "description": "Recorded data history"
        }
      ]
    },
    {
      "name": "Relay",
      "category": "Util",
      "subcategory": "Data",
      "description": "Pass data through without modification",
      "inputs": [
        {
          "name": "Data",
          "type": "Generic",
          "description": "Input data"
        }
      ],
      "outputs": [
        {
          "name": "Data",
          "type": "Generic",
          "description": "Output data"
        }
      ]
    },
    {
      "name": "Stream Filter",
      "category": "Util",
      "subcategory": "Data",
      "description": "Filter data streams based on gate index",
      "inputs": [
        {
          "name": "Gate",
          "type": "Integer",
          "description": "Gate index"
        },
        {
          "name": "Stream 0",
          "type": "Generic",
          "description": "First data stream"
        },
        {
          "name": "Stream 1",
          "type": "Generic",
          "description": "Second data stream",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Stream",
          "type": "Generic",
          "description": "Selected stream"
        }
      ]
    },
    {
      "name": "Trigger",
      "category": "Util",
      "subcategory": "Time",
      "description": "Timer component to trigger updates at regular intervals",
      "inputs": [
        {
          "name": "Run",
          "type": "Boolean",
          "description": "Enable/disable timer"
        },
        {
          "name": "Interval",
          "type": "Integer",
          "description": "Update interval in milliseconds"
        }
      ],
      "outputs": [
        {
          "name": "Time",
          "type": "Number",
          "description": "Current time"
        },
        {
          "name": "Trigger",
          "type": "Boolean",
          "description": "Trigger signal"
        }
      ]
    },
    {
      "name": "Amplitude",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Set the amplitude of a vector",
      "inputs": [
        {
          "name": "Vector",
          "type": "Vector",
          "description": "Input vector"
        },
        {
          "name": "Amplitude",
          "type": "Number",
          "description": "New amplitude"
        }
      ],
      "outputs": [
        {
          "name": "Vector",
          "type": "Vector",
          "description": "Vector with new amplitude"
        }
      ]
    },
    {
      "name": "Construct Point",
      "category": "Vector",
      "subcategory": "Point",
      "description": "Construct a point from coordinates",
      "inputs": [
        {
          "name": "X",
          "type": "Number",
          "description": "X coordinate"
        },
        {
          "name": "Y",
          "type": "Number",
          "description": "Y coordinate"
        },
        {
          "name": "Z",
          "type": "Number",
          "description": "Z coordinate"
        }
      ],
      "outputs": [
        {
          "name": "Point",
          "type": "Point",
          "description": "Point"
        }
      ]
    },
    {
      "name": "Cross Product",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Compute the cross product of two vectors",
      "inputs": [
        {
          "name": "Vector A",
          "type": "Vector",
          "description": "First vector"
        },
        {
          "name": "Vector B",
          "type": "Vector",
          "description": "Second vector"
        }
      ],
      "outputs": [
        {
          "name": "Cross Product",
          "type": "Vector",
          "description": "Cross product result"
        }
      ]
    },
    {
      "name": "Deconstruct Point",
      "category": "Vector",
      "subcategory": "Point",
      "description": "Extract XYZ coordinates from a point",
      "inputs": [
        {
          "name": "Point",
          "type": "Point",
          "description": "Point to deconstruct"
        }
      ],
      "outputs": [
        {
          "name": "X",
          "type": "Number",
          "description": "X coordinate"
        },
        {
          "name": "Y",
          "type": "Number",
          "description": "Y coordinate"
        },
        {
          "name": "Z",
          "type": "Number",
          "description": "Z coordinate"
        }
      ]
    },
    {
      "name": "Distance",
      "category": "Vector",
      "subcategory": "Point",
      "description": "Compute Euclidean distance between two points",
      "inputs": [
        {
          "name": "Point A",
          "type": "Point",
          "description": "First point"
        },
        {
          "name": "Point B",
          "type": "Point",
          "description": "Second point"
        }
      ],
      "outputs": [
        {
          "name": "Distance",
          "type": "Number",
          "description": "Distance between points"
        }
      ]
    },
    {
      "name": "Dot Product",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Compute the dot product of two vectors",
      "inputs": [
        {
          "name": "Vector A",
          "type": "Vector",
          "description": "First vector"
        },
        {
          "name": "Vector B",
          "type": "Vector",
          "description": "Second vector"
        }
      ],
      "outputs": [
        {
          "name": "Dot Product",
          "type": "Number",
          "description": "Dot product result"
        }
      ]
    },
    {
      "name": "Hex Grid",
      "category": "Vector",
      "subcategory": "Grid",
      "description": "Create a hexagonal grid of points",
      "inputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Base plane"
        },
        {
          "name": "Size",
          "type": "Number",
          "description": "Cell size"
        },
        {
          "name": "Extent X",
          "type": "Number",
          "description": "Grid extent in X"
        },
        {
          "name": "Extent Y",
          "type": "Number",
          "description": "Grid extent in Y"
        }
      ],
      "outputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Hex grid points"
        }
      ]
    },
    {
      "name": "Populate 2D",
      "category": "Vector",
      "subcategory": "Grid",
      "description": "Create a 2D grid of points",
      "inputs": [
        {
          "name": "Region",
          "type": "Curve",
          "description": "Region boundary"
        },
        {
          "name": "Count",
          "type": "Integer",
          "description": "Number of points"
        },
        {
          "name": "Seed",
          "type": "Integer",
          "description": "Random seed",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Populated points"
        }
      ]
    },
    {
      "name": "Populate Geometry",
      "category": "Vector",
      "subcategory": "Grid",
      "description": "Populate geometry with random points",
      "inputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Target geometry"
        },
        {
          "name": "Count",
          "type": "Integer",
          "description": "Number of points"
        },
        {
          "name": "Seed",
          "type": "Integer",
          "description": "Random seed",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Random points"
        }
      ]
    },
    {
      "name": "Triangular Grid",
      "category": "Vector",
      "subcategory": "Grid",
      "description": "Create a triangular grid of points",
      "inputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "Base plane"
        },
        {
          "name": "Size",
          "type": "Number",
          "description": "Cell size"
        },
        {
          "name": "Extent X",
          "type": "Number",
          "description": "Grid extent in X"
        },
        {
          "name": "Extent Y",
          "type": "Number",
          "description": "Grid extent in Y"
        }
      ],
      "outputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Triangular grid points"
        }
      ]
    },
    {
      "name": "Unit X",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Unit vector in world X direction",
      "inputs": [
        {
          "name": "Factor",
          "type": "Number",
          "description": "Vector factor",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Unit X",
          "type": "Vector",
          "description": "X axis vector"
        }
      ]
    },
    {
      "name": "Unit Y",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Unit vector in world Y direction",
      "inputs": [
        {
          "name": "Factor",
          "type": "Number",
          "description": "Vector factor",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Unit Y",
          "type": "Vector",
          "description": "Y axis vector"
        }
      ]
    },
    {
      "name": "Unit Z",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Unit vector in world Z direction",
      "inputs": [
        {
          "name": "Factor",
          "type": "Number",
          "description": "Vector factor",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Unit Z",
          "type": "Vector",
          "description": "Z axis vector"
        }
      ]
    },
    {
      "name": "Unitize",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Unitize a vector",
      "inputs": [
        {
          "name": "Vector",
          "type": "Vector",
          "description": "Vector to unitize"
        }
      ],
      "outputs": [
        {
          "name": "Vector",
          "type": "Vector",
          "description": "Unit vector"
        },
        {
          "name": "Length",
          "type": "Number",
          "description": "Original length"
        }
      ]
    },
    {
      "name": "Vector 2Pt",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Create a vector between two points",
      "inputs": [
        {
          "name": "Point A",
          "type": "Point",
          "description": "Base point"
        },
        {
          "name": "Point B",
          "type": "Point",
          "description": "Tip point"
        },
        {
          "name": "Unitize",
          "type": "Boolean",
          "description": "Unitize output",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Vector",
          "type": "Vector",
          "description": "Vector"
        },
        {
          "name": "Length",
          "type": "Number",
          "description": "Vector length"
        }
      ]
    },
    {
      "name": "Vector Angle",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Compute the angle between two vectors",
      "inputs": [
        {
          "name": "Vector A",
          "type": "Vector",
          "description": "First vector"
        },
        {
          "name": "Vector B",
          "type": "Vector",
          "description": "Second vector"
        }
      ],
      "outputs": [
        {
          "name": "Angle",
          "type": "Number",
          "description": "Angle in radians"
        }
      ]
    },
    {
      "name": "Vector Length",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Compute the length of a vector",
      "inputs": [
        {
          "name": "Vector",
          "type": "Vector",
          "description": "Input vector"
        }
      ],
      "outputs": [
        {
          "name": "Length",
          "type": "Number",
          "description": "Vector length"
        }
      ]
    },
    {
      "name": "Vector XYZ",
      "category": "Vector",
      "subcategory": "Vector",
      "description": "Create a vector from XYZ components",
      "inputs": [
        {
          "name": "X",
          "type": "Number",
          "description": "X component"
        },
        {
          "name": "Y",
          "type": "Number",
          "description": "Y component"
        },
        {
          "name": "Z",
          "type": "Number",
          "description": "Z component"
        }
      ],
      "outputs": [
        {
          "name": "Vector",
          "type": "Vector",
          "description": "XYZ vector"
        }
      ]
    },
    {
      "name": "XY Plane",
      "category": "Vector",
      "subcategory": "Plane",
      "description": "Creates an XY plane at the world origin or at a specified point",
      "inputs": [
        {
          "name": "Origin",
          "type": "Point",
          "description": "Origin point",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Plane",
          "type": "Plane",
          "description": "XY plane"
        }
      ]
    },
    {
      "name": "Curve Domain",
      "category": "Analysis",
      "subcategory": "Curve",
      "description": "Get domain boundaries of a curve",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Curve to analyze"
        }
      ],
      "outputs": [
        {
          "name": "Domain",
          "type": "Domain",
          "description": "Curve domain"
        }
      ]
    },
    {
      "name": "Mesh Edges",
      "category": "Analysis",
      "subcategory": "Mesh",
      "description": "Get mesh edge information",
      "inputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Mesh to analyze"
        }
      ],
      "outputs": [
        {
          "name": "Naked Edges",
          "type": "Polyline",
          "description": "Naked edge polylines"
        },
        {
          "name": "Interior Edges",
          "type": "Polyline",
          "description": "Interior edge polylines"
        }
      ]
    },
    {
      "name": "Surface Domain",
      "category": "Analysis",
      "subcategory": "Surface",
      "description": "Get UV domain boundaries of a surface",
      "inputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Surface to analyze"
        }
      ],
      "outputs": [
        {
          "name": "U",
          "type": "Domain",
          "description": "U domain"
        },
        {
          "name": "V",
          "type": "Domain",
          "description": "V domain"
        }
      ]
    },
    {
      "name": "Surface Area",
      "category": "Analysis",
      "subcategory": "Surface",
      "description": "Calculate surface area",
      "inputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Surface to analyze"
        }
      ],
      "outputs": [
        {
          "name": "Area",
          "type": "Number",
          "description": "Surface area"
        }
      ]
    },
    {
      "name": "Curvature",
      "category": "Analysis",
      "subcategory": "Curve",
      "description": "Analyze curve curvature at parameter",
      "inputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Curve to analyze"
        },
        {
          "name": "Parameter",
          "type": "Number",
          "description": "Parameter on curve"
        }
      ],
      "outputs": [
        {
          "name": "Point",
          "type": "Point",
          "description": "Point at parameter"
        },
        {
          "name": "Curvature",
          "type": "Number",
          "description": "Curvature value"
        },
        {
          "name": "Vector",
          "type": "Vector",
          "description": "Curvature vector"
        }
      ]
    },
    {
      "name": "Populate 3D",
      "category": "Vector",
      "subcategory": "Grid",
      "description": "Populate a box with random points",
      "inputs": [
        {
          "name": "Box",
          "type": "Box",
          "description": "Bounding box"
        },
        {
          "name": "Count",
          "type": "Integer",
          "description": "Number of points"
        },
        {
          "name": "Seed",
          "type": "Integer",
          "description": "Random seed",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "Points",
          "type": "Point",
          "description": "Random points"
        }
      ]
    },
    {
      "name": "Surface",
      "category": "Params",
      "subcategory": "Geometry",
      "description": "Surface parameter for user input",
      "inputs": [],
      "outputs": [
        {
          "name": "Surface",
          "type": "Surface",
          "description": "Surface data"
        }
      ],
      "isParameter": true
    },
    {
      "name": "Curve",
      "category": "Params",
      "subcategory": "Geometry",
      "description": "Curve parameter for user input",
      "inputs": [],
      "outputs": [
        {
          "name": "Curve",
          "type": "Curve",
          "description": "Curve data"
        }
      ],
      "isParameter": true
    },
    {
      "name": "Mesh",
      "category": "Params",
      "subcategory": "Geometry",
      "description": "Mesh parameter for user input",
      "inputs": [],
      "outputs": [
        {
          "name": "Mesh",
          "type": "Mesh",
          "description": "Mesh data"
        }
      ],
      "isParameter": true
    },
    {
      "name": "Geometry",
      "category": "Params",
      "subcategory": "Geometry",
      "description": "Geometry parameter for user input",
      "inputs": [],
      "outputs": [
        {
          "name": "Geometry",
          "type": "Geometry",
          "description": "Geometry data"
        }
      ],
      "isParameter": true
    },
    {
      "name": "Generic",
      "category": "Params",
      "subcategory": "Geometry",
      "description": "Generic parameter for user input",
      "inputs": [],
      "outputs": [
        {
          "name": "Generic",
          "type": "Generic",
          "description": "Generic data"
        }
      ],
      "isParameter": true
    }
  ],
  "patterns": [
    {
      "name": "3D Box",
      "description": "Creates a simple 3D box",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "plane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "sliderX",
          "settings": {
            "min": 0,
            "max": 50,
            "value": 20
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "sliderY",
          "settings": {
            "min": 0,
            "max": 50,
            "value": 20
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 300,
          "id": "sliderZ",
          "settings": {
            "min": 0,
            "max": 50,
            "value": 20
          }
        },
        {
          "type": "Box",
          "x": 400,
          "y": 200,
          "id": "box"
        }
      ],
      "connections": [
        {
          "source": "plane",
          "sourceParam": "Plane",
          "target": "box",
          "targetParam": "Base"
        },
        {
          "source": "sliderX",
          "sourceParam": "Number",
          "target": "box",
          "targetParam": "X Size"
        },
        {
          "source": "sliderY",
          "sourceParam": "Number",
          "target": "box",
          "targetParam": "Y Size"
        },
        {
          "source": "sliderZ",
          "sourceParam": "Number",
          "target": "box",
          "targetParam": "Z Size"
        }
      ]
    },
    {
      "name": "3D Voronoi",
      "description": "Creates a 3D Voronoi pattern within a box",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "plane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "sizeX",
          "settings": {
            "min": 0,
            "max": 100,
            "value": 50
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "sizeY",
          "settings": {
            "min": 0,
            "max": 100,
            "value": 50
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 300,
          "id": "sizeZ",
          "settings": {
            "min": 0,
            "max": 100,
            "value": 50
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 350,
          "id": "countX",
          "settings": {
            "min": 1,
            "max": 20,
            "value": 10
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 400,
          "id": "countY",
          "settings": {
            "min": 1,
            "max": 20,
            "value": 10
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 450,
          "id": "countZ",
          "settings": {
            "min": 1,
            "max": 20,
            "value": 10
          }
        },
        {
          "type": "Populate 3D",
          "x": 400,
          "y": 250,
          "id": "populate"
        },
        {
          "type": "Voronoi",
          "x": 600,
          "y": 250,
          "id": "voronoi"
        }
      ],
      "connections": [
        {
          "source": "plane",
          "sourceParam": "Plane",
          "target": "populate",
          "targetParam": "Base"
        },
        {
          "source": "sizeX",
          "sourceParam": "Number",
          "target": "populate",
          "targetParam": "Size X"
        },
        {
          "source": "sizeY",
          "sourceParam": "Number",
          "target": "populate",
          "targetParam": "Size Y"
        },
        {
          "source": "sizeZ",
          "sourceParam": "Number",
          "target": "populate",
          "targetParam": "Size Z"
        },
        {
          "source": "countX",
          "sourceParam": "Number",
          "target": "populate",
          "targetParam": "Count X"
        },
        {
          "source": "countY",
          "sourceParam": "Number",
          "target": "populate",
          "targetParam": "Count Y"
        },
        {
          "source": "countZ",
          "sourceParam": "Number",
          "target": "populate",
          "targetParam": "Count Z"
        },
        {
          "source": "populate",
          "sourceParam": "Points",
          "target": "voronoi",
          "targetParam": "Points"
        }
      ]
    },
    {
      "name": "Circle",
      "description": "Creates a simple circle",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "plane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "radius",
          "settings": {
            "min": 0,
            "max": 50,
            "value": 10
          }
        },
        {
          "type": "Circle",
          "x": 400,
          "y": 150,
          "id": "circle"
        }
      ],
      "connections": [
        {
          "source": "plane",
          "sourceParam": "Plane",
          "target": "circle",
          "targetParam": "Plane"
        },
        {
          "source": "radius",
          "sourceParam": "Number",
          "target": "circle",
          "targetParam": "Radius"
        }
      ]
    },
    {
      "name": "Sphere",
      "description": "Creates a 3D sphere geometry",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "plane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "radius",
          "settings": {
            "min": 0,
            "max": 50,
            "value": 10
          }
        },
        {
          "type": "Sphere",
          "x": 400,
          "y": 150,
          "id": "sphere"
        }
      ],
      "connections": [
        {
          "source": "plane",
          "sourceParam": "Plane",
          "target": "sphere",
          "targetParam": "Base"
        },
        {
          "source": "radius",
          "sourceParam": "Number",
          "target": "sphere",
          "targetParam": "Radius"
        }
      ]
    },
    {
      "name": "Cylinder Tower",
      "description": "Creates a cylinder geometry with adjustable height and radius",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "plane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "radius",
          "settings": {
            "min": 0,
            "max": 20,
            "value": 5
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "height",
          "settings": {
            "min": 0,
            "max": 100,
            "value": 30
          }
        },
        {
          "type": "Cylinder",
          "x": 400,
          "y": 150,
          "id": "cylinder"
        }
      ],
      "connections": [
        {
          "source": "plane",
          "sourceParam": "Plane",
          "target": "cylinder",
          "targetParam": "Base"
        },
        {
          "source": "radius",
          "sourceParam": "Number",
          "target": "cylinder",
          "targetParam": "Radius"
        },
        {
          "source": "height",
          "sourceParam": "Number",
          "target": "cylinder",
          "targetParam": "Height"
        }
      ]
    },
    {
      "name": "Parametric Grid",
      "description": "Creates a grid of points using series",
      "components": [
        {
          "type": "Number Slider",
          "x": 100,
          "y": 100,
          "id": "countX",
          "settings": {
            "min": 2,
            "max": 20,
            "value": 10
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 150,
          "id": "countY",
          "settings": {
            "min": 2,
            "max": 20,
            "value": 10
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "spacing",
          "settings": {
            "min": 1,
            "max": 10,
            "value": 2
          }
        },
        {
          "type": "Series",
          "x": 300,
          "y": 100,
          "id": "seriesX"
        },
        {
          "type": "Series",
          "x": 300,
          "y": 200,
          "id": "seriesY"
        },
        {
          "type": "Construct Point",
          "x": 500,
          "y": 150,
          "id": "points"
        }
      ],
      "connections": [
        {
          "source": "countX",
          "sourceParam": "Number",
          "target": "seriesX",
          "targetParam": "Count"
        },
        {
          "source": "spacing",
          "sourceParam": "Number",
          "target": "seriesX",
          "targetParam": "Step"
        },
        {
          "source": "countY",
          "sourceParam": "Number",
          "target": "seriesY",
          "targetParam": "Count"
        },
        {
          "source": "spacing",
          "sourceParam": "Number",
          "target": "seriesY",
          "targetParam": "Step"
        },
        {
          "source": "seriesX",
          "sourceParam": "Series",
          "target": "points",
          "targetParam": "X"
        },
        {
          "source": "seriesY",
          "sourceParam": "Series",
          "target": "points",
          "targetParam": "Y"
        }
      ]
    },
    {
      "name": "Transformed Box",
      "description": "Creates a box and transforms it",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "plane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "size",
          "settings": {
            "min": 0,
            "max": 20,
            "value": 10
          }
        },
        {
          "type": "Box",
          "x": 300,
          "y": 150,
          "id": "box"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 300,
          "id": "moveX",
          "settings": {
            "min": -50,
            "max": 50,
            "value": 20
          }
        },
        {
          "type": "Construct Point",
          "x": 300,
          "y": 350,
          "id": "moveVector"
        },
        {
          "type": "Move",
          "x": 500,
          "y": 200,
          "id": "move"
        }
      ],
      "connections": [
        {
          "source": "plane",
          "sourceParam": "Plane",
          "target": "box",
          "targetParam": "Base"
        },
        {
          "source": "size",
          "sourceParam": "Number",
          "target": "box",
          "targetParam": "X Size"
        },
        {
          "source": "size",
          "sourceParam": "Number",
          "target": "box",
          "targetParam": "Y Size"
        },
        {
          "source": "size",
          "sourceParam": "Number",
          "target": "box",
          "targetParam": "Z Size"
        },
        {
          "source": "box",
          "sourceParam": "Box",
          "target": "move",
          "targetParam": "Geometry"
        },
        {
          "source": "moveX",
          "sourceParam": "Number",
          "target": "moveVector",
          "targetParam": "X"
        },
        {
          "source": "moveVector",
          "sourceParam": "Point",
          "target": "move",
          "targetParam": "Motion"
        }
      ]
    },
    {
      "name": "Math Operations",
      "description": "Demonstrates basic mathematical operations",
      "components": [
        {
          "type": "Number Slider",
          "x": 100,
          "y": 100,
          "id": "numA",
          "settings": {
            "min": 0,
            "max": 10,
            "value": 5
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 150,
          "id": "numB",
          "settings": {
            "min": 0,
            "max": 10,
            "value": 3
          }
        },
        {
          "type": "Addition",
          "x": 300,
          "y": 100,
          "id": "add"
        },
        {
          "type": "Multiplication",
          "x": 300,
          "y": 200,
          "id": "multiply"
        },
        {
          "type": "Panel",
          "x": 500,
          "y": 100,
          "id": "sumPanel"
        },
        {
          "type": "Panel",
          "x": 500,
          "y": 200,
          "id": "productPanel"
        }
      ],
      "connections": [
        {
          "source": "numA",
          "sourceParam": "Number",
          "target": "add",
          "targetParam": "A"
        },
        {
          "source": "numB",
          "sourceParam": "Number",
          "target": "add",
          "targetParam": "B"
        },
        {
          "source": "numA",
          "sourceParam": "Number",
          "target": "multiply",
          "targetParam": "A"
        },
        {
          "source": "numB",
          "sourceParam": "Number",
          "target": "multiply",
          "targetParam": "B"
        },
        {
          "source": "add",
          "sourceParam": "Result",
          "target": "sumPanel",
          "targetParam": "Input"
        },
        {
          "source": "multiply",
          "sourceParam": "Result",
          "target": "productPanel",
          "targetParam": "Input"
        }
      ]
    },
    {
      "name": "Line Between Points",
      "description": "Creates a line between two constructed points",
      "components": [
        {
          "type": "Number Slider",
          "x": 100,
          "y": 100,
          "id": "x1",
          "settings": {
            "min": -10,
            "max": 10,
            "value": 0
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 150,
          "id": "y1",
          "settings": {
            "min": -10,
            "max": 10,
            "value": 0
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "x2",
          "settings": {
            "min": -10,
            "max": 10,
            "value": 10
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "y2",
          "settings": {
            "min": -10,
            "max": 10,
            "value": 10
          }
        },
        {
          "type": "Construct Point",
          "x": 300,
          "y": 125,
          "id": "point1"
        },
        {
          "type": "Construct Point",
          "x": 300,
          "y": 225,
          "id": "point2"
        },
        {
          "type": "Line",
          "x": 500,
          "y": 175,
          "id": "line"
        }
      ],
      "connections": [
        {
          "source": "x1",
          "sourceParam": "Number",
          "target": "point1",
          "targetParam": "X"
        },
        {
          "source": "y1",
          "sourceParam": "Number",
          "target": "point1",
          "targetParam": "Y"
        },
        {
          "source": "x2",
          "sourceParam": "Number",
          "target": "point2",
          "targetParam": "X"
        },
        {
          "source": "y2",
          "sourceParam": "Number",
          "target": "point2",
          "targetParam": "Y"
        },
        {
          "source": "point1",
          "sourceParam": "Point",
          "target": "line",
          "targetParam": "Start"
        },
        {
          "source": "point2",
          "sourceParam": "Point",
          "target": "line",
          "targetParam": "End"
        }
      ]
    },
    {
      "name": "Divided Circle",
      "description": "Creates a circle and divides it into points",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "plane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "radius",
          "settings": {
            "min": 0,
            "max": 50,
            "value": 20
          }
        },
        {
          "type": "Circle",
          "x": 300,
          "y": 150,
          "id": "circle"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 300,
          "id": "divisions",
          "settings": {
            "min": 3,
            "max": 50,
            "value": 12
          }
        },
        {
          "type": "Divide Curve",
          "x": 500,
          "y": 200,
          "id": "divide"
        }
      ],
      "connections": [
        {
          "source": "plane",
          "sourceParam": "Plane",
          "target": "circle",
          "targetParam": "Plane"
        },
        {
          "source": "radius",
          "sourceParam": "Number",
          "target": "circle",
          "targetParam": "Radius"
        },
        {
          "source": "circle",
          "sourceParam": "Circle",
          "target": "divide",
          "targetParam": "Curve"
        },
        {
          "source": "divisions",
          "sourceParam": "Number",
          "target": "divide",
          "targetParam": "Count"
        }
      ]
    },
    {
      "name": "Parametric Surface",
      "description": "Creates a parametric NURBS surface from a grid of points",
      "components": [
        {
          "type": "Number Slider",
          "x": 100,
          "y": 100,
          "id": "uCount",
          "settings": {
            "min": 3,
            "max": 20,
            "value": 8
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 150,
          "id": "vCount",
          "settings": {
            "min": 3,
            "max": 20,
            "value": 8
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "amplitude",
          "settings": {
            "min": 0,
            "max": 10,
            "value": 3
          }
        },
        {
          "type": "Series",
          "x": 300,
          "y": 100,
          "id": "uSeries"
        },
        {
          "type": "Series",
          "x": 300,
          "y": 150,
          "id": "vSeries"
        },
        {
          "type": "Construct Point",
          "x": 500,
          "y": 125,
          "id": "basePoints"
        },
        {
          "type": "Random",
          "x": 300,
          "y": 250,
          "id": "randomZ"
        },
        {
          "type": "Vector XYZ",
          "x": 500,
          "y": 200,
          "id": "zVector"
        },
        {
          "type": "Move",
          "x": 700,
          "y": 150,
          "id": "movePoints"
        },
        {
          "type": "Surface from Points",
          "x": 900,
          "y": 175,
          "id": "surface"
        }
      ],
      "connections": [
        {
          "source": "uCount",
          "sourceParam": "Number",
          "target": "uSeries",
          "targetParam": "Count"
        },
        {
          "source": "vCount",
          "sourceParam": "Number",
          "target": "vSeries",
          "targetParam": "Count"
        },
        {
          "source": "uSeries",
          "sourceParam": "Series",
          "target": "basePoints",
          "targetParam": "X"
        },
        {
          "source": "vSeries",
          "sourceParam": "Series",
          "target": "basePoints",
          "targetParam": "Y"
        },
        {
          "source": "amplitude",
          "sourceParam": "Number",
          "target": "randomZ",
          "targetParam": "Range"
        },
        {
          "source": "uCount",
          "sourceParam": "Number",
          "target": "randomZ",
          "targetParam": "Count"
        },
        {
          "source": "randomZ",
          "sourceParam": "Random",
          "target": "zVector",
          "targetParam": "Z"
        },
        {
          "source": "basePoints",
          "sourceParam": "Point",
          "target": "movePoints",
          "targetParam": "Geometry"
        },
        {
          "source": "zVector",
          "sourceParam": "Vector",
          "target": "movePoints",
          "targetParam": "Motion"
        },
        {
          "source": "movePoints",
          "sourceParam": "Geometry",
          "target": "surface",
          "targetParam": "Points"
        },
        {
          "source": "uCount",
          "sourceParam": "Number",
          "target": "surface",
          "targetParam": "U Count"
        },
        {
          "source": "vCount",
          "sourceParam": "Number",
          "target": "surface",
          "targetParam": "V Count"
        }
      ]
    },
    {
      "name": "Twisted Tower",
      "description": "Creates a twisted parametric tower using rotation and loft",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "basePlane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "radius",
          "settings": {
            "min": 5,
            "max": 30,
            "value": 15
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "height",
          "settings": {
            "min": 10,
            "max": 100,
            "value": 50
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 300,
          "id": "twist",
          "settings": {
            "min": 0,
            "max": 6.28,
            "value": 1.57
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 350,
          "id": "levels",
          "settings": {
            "min": 5,
            "max": 30,
            "value": 12
          }
        },
        {
          "type": "Circle",
          "x": 300,
          "y": 150,
          "id": "baseCircle"
        },
        {
          "type": "Series",
          "x": 300,
          "y": 300,
          "id": "heightSeries"
        },
        {
          "type": "Construct Point",
          "x": 500,
          "y": 250,
          "id": "centerPoints"
        },
        {
          "type": "Vector XYZ",
          "x": 500,
          "y": 300,
          "id": "zVector"
        },
        {
          "type": "Move",
          "x": 700,
          "y": 200,
          "id": "movePlanes"
        },
        {
          "type": "Rotate",
          "x": 700,
          "y": 300,
          "id": "rotatePlanes"
        },
        {
          "type": "Circle",
          "x": 900,
          "y": 250,
          "id": "levelCircles"
        },
        {
          "type": "Loft",
          "x": 1100,
          "y": 275,
          "id": "tower"
        }
      ],
      "connections": [
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "baseCircle",
          "targetParam": "Plane"
        },
        {
          "source": "radius",
          "sourceParam": "Number",
          "target": "baseCircle",
          "targetParam": "Radius"
        },
        {
          "source": "height",
          "sourceParam": "Number",
          "target": "heightSeries",
          "targetParam": "Step"
        },
        {
          "source": "levels",
          "sourceParam": "Number",
          "target": "heightSeries",
          "targetParam": "Count"
        },
        {
          "source": "heightSeries",
          "sourceParam": "Series",
          "target": "zVector",
          "targetParam": "Z"
        },
        {
          "source": "zVector",
          "sourceParam": "Vector",
          "target": "centerPoints",
          "targetParam": "Z"
        },
        {
          "source": "centerPoints",
          "sourceParam": "Point",
          "target": "movePlanes",
          "targetParam": "Motion"
        },
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "movePlanes",
          "targetParam": "Geometry"
        },
        {
          "source": "movePlanes",
          "sourceParam": "Geometry",
          "target": "rotatePlanes",
          "targetParam": "Geometry"
        },
        {
          "source": "twist",
          "sourceParam": "Number",
          "target": "rotatePlanes",
          "targetParam": "Angle"
        },
        {
          "source": "movePlanes",
          "sourceParam": "Geometry",
          "target": "rotatePlanes",
          "targetParam": "Plane"
        },
        {
          "source": "rotatePlanes",
          "sourceParam": "Geometry",
          "target": "levelCircles",
          "targetParam": "Plane"
        },
        {
          "source": "radius",
          "sourceParam": "Number",
          "target": "levelCircles",
          "targetParam": "Radius"
        },
        {
          "source": "levelCircles",
          "sourceParam": "Circle",
          "target": "tower",
          "targetParam": "Curves"
        }
      ]
    },
    {
      "name": "Hexagonal Pavilion",
      "description": "Creates a hexagonal pavilion structure with roof",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "basePlane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "radius",
          "settings": {
            "min": 10,
            "max": 50,
            "value": 25
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "height",
          "settings": {
            "min": 5,
            "max": 30,
            "value": 15
          }
        },
        {
          "type": "Hex Grid",
          "x": 300,
          "y": 150,
          "id": "hexPoints"
        },
        {
          "type": "Construct Point",
          "x": 300,
          "y": 250,
          "id": "centerPoint"
        },
        {
          "type": "Vector XYZ",
          "x": 300,
          "y": 300,
          "id": "heightVector"
        },
        {
          "type": "Move",
          "x": 500,
          "y": 200,
          "id": "topPoints"
        },
        {
          "type": "Convex Hull",
          "x": 700,
          "y": 150,
          "id": "baseHull"
        },
        {
          "type": "Convex Hull",
          "x": 700,
          "y": 250,
          "id": "topHull"
        },
        {
          "type": "Loft",
          "x": 900,
          "y": 200,
          "id": "pavilion"
        }
      ],
      "connections": [
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "hexPoints",
          "targetParam": "Plane"
        },
        {
          "source": "radius",
          "sourceParam": "Number",
          "target": "hexPoints",
          "targetParam": "Size"
        },
        {
          "source": "radius",
          "sourceParam": "Number",
          "target": "hexPoints",
          "targetParam": "Extent X"
        },
        {
          "source": "radius",
          "sourceParam": "Number",
          "target": "hexPoints",
          "targetParam": "Extent Y"
        },
        {
          "source": "height",
          "sourceParam": "Number",
          "target": "heightVector",
          "targetParam": "Z"
        },
        {
          "source": "hexPoints",
          "sourceParam": "Points",
          "target": "baseHull",
          "targetParam": "Points"
        },
        {
          "source": "hexPoints",
          "sourceParam": "Points",
          "target": "topPoints",
          "targetParam": "Geometry"
        },
        {
          "source": "heightVector",
          "sourceParam": "Vector",
          "target": "topPoints",
          "targetParam": "Motion"
        },
        {
          "source": "topPoints",
          "sourceParam": "Geometry",
          "target": "topHull",
          "targetParam": "Points"
        },
        {
          "source": "baseHull",
          "sourceParam": "Hull",
          "target": "pavilion",
          "targetParam": "Curves"
        },
        {
          "source": "topHull",
          "sourceParam": "Hull",
          "target": "pavilion",
          "targetParam": "Curves"
        }
      ]
    },
    {
      "name": "Parametric Wave",
      "description": "Creates a wave surface using trigonometric functions",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "basePlane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "wavelength",
          "settings": {
            "min": 1,
            "max": 10,
            "value": 4
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "amplitude",
          "settings": {
            "min": 1,
            "max": 20,
            "value": 8
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 300,
          "id": "density",
          "settings": {
            "min": 10,
            "max": 50,
            "value": 25
          }
        },
        {
          "type": "Rectangular Array",
          "x": 300,
          "y": 200,
          "id": "gridPoints"
        },
        {
          "type": "Deconstruct Point",
          "x": 500,
          "y": 150,
          "id": "deconstructPt"
        },
        {
          "type": "Division",
          "x": 500,
          "y": 200,
          "id": "normalizeX"
        },
        {
          "type": "Multiplication",
          "x": 500,
          "y": 250,
          "id": "scaleWave"
        },
        {
          "type": "Sine",
          "x": 700,
          "y": 200,
          "id": "sineWave"
        },
        {
          "type": "Multiplication",
          "x": 700,
          "y": 250,
          "id": "finalAmplitude"
        },
        {
          "type": "Construct Point",
          "x": 900,
          "y": 200,
          "id": "wavePoints"
        },
        {
          "type": "Mesh Plane",
          "x": 1100,
          "y": 225,
          "id": "waveMesh"
        }
      ],
      "connections": [
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "gridPoints",
          "targetParam": "Plane"
        },
        {
          "source": "density",
          "sourceParam": "Number",
          "target": "gridPoints",
          "targetParam": "Count X"
        },
        {
          "source": "density",
          "sourceParam": "Number",
          "target": "gridPoints",
          "targetParam": "Count Y"
        },
        {
          "source": "gridPoints",
          "sourceParam": "Geometry",
          "target": "deconstructPt",
          "targetParam": "Point"
        },
        {
          "source": "deconstructPt",
          "sourceParam": "X",
          "target": "normalizeX",
          "targetParam": "A"
        },
        {
          "source": "wavelength",
          "sourceParam": "Number",
          "target": "normalizeX",
          "targetParam": "B"
        },
        {
          "source": "normalizeX",
          "sourceParam": "Result",
          "target": "sineWave",
          "targetParam": "Value"
        },
        {
          "source": "sineWave",
          "sourceParam": "Result",
          "target": "finalAmplitude",
          "targetParam": "A"
        },
        {
          "source": "amplitude",
          "sourceParam": "Number",
          "target": "finalAmplitude",
          "targetParam": "B"
        },
        {
          "source": "deconstructPt",
          "sourceParam": "X",
          "target": "wavePoints",
          "targetParam": "X"
        },
        {
          "source": "deconstructPt",
          "sourceParam": "Y",
          "target": "wavePoints",
          "targetParam": "Y"
        },
        {
          "source": "finalAmplitude",
          "sourceParam": "Result",
          "target": "wavePoints",
          "targetParam": "Z"
        },
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "waveMesh",
          "targetParam": "Plane"
        },
        {
          "source": "density",
          "sourceParam": "Number",
          "target": "waveMesh",
          "targetParam": "U Count"
        },
        {
          "source": "density",
          "sourceParam": "Number",
          "target": "waveMesh",
          "targetParam": "V Count"
        }
      ]
    },
    {
      "name": "Boolean Architecture",
      "description": "Creates complex geometry using boolean operations",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "basePlane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "size",
          "settings": {
            "min": 10,
            "max": 40,
            "value": 25
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "cutSize",
          "settings": {
            "min": 5,
            "max": 20,
            "value": 12
          }
        },
        {
          "type": "Box",
          "x": 300,
          "y": 150,
          "id": "mainBox"
        },
        {
          "type": "Sphere",
          "x": 300,
          "y": 250,
          "id": "cuttingSphere"
        },
        {
          "type": "Cylinder",
          "x": 300,
          "y": 350,
          "id": "cuttingCylinder"
        },
        {
          "type": "Boolean Difference",
          "x": 500,
          "y": 200,
          "id": "subtract1"
        },
        {
          "type": "Boolean Difference",
          "x": 700,
          "y": 250,
          "id": "final"
        }
      ],
      "connections": [
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "mainBox",
          "targetParam": "Base"
        },
        {
          "source": "size",
          "sourceParam": "Number",
          "target": "mainBox",
          "targetParam": "X Size"
        },
        {
          "source": "size",
          "sourceParam": "Number",
          "target": "mainBox",
          "targetParam": "Y Size"
        },
        {
          "source": "size",
          "sourceParam": "Number",
          "target": "mainBox",
          "targetParam": "Z Size"
        },
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "cuttingSphere",
          "targetParam": "Base"
        },
        {
          "source": "cutSize",
          "sourceParam": "Number",
          "target": "cuttingSphere",
          "targetParam": "Radius"
        },
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "cuttingCylinder",
          "targetParam": "Base"
        },
        {
          "source": "cutSize",
          "sourceParam": "Number",
          "target": "cuttingCylinder",
          "targetParam": "Radius"
        },
        {
          "source": "size",
          "sourceParam": "Number",
          "target": "cuttingCylinder",
          "targetParam": "Height"
        },
        {
          "source": "mainBox",
          "sourceParam": "Box",
          "target": "subtract1",
          "targetParam": "Breps A"
        },
        {
          "source": "cuttingSphere",
          "sourceParam": "Sphere",
          "target": "subtract1",
          "targetParam": "Breps B"
        },
        {
          "source": "subtract1",
          "sourceParam": "Result",
          "target": "final",
          "targetParam": "Breps A"
        },
        {
          "source": "cuttingCylinder",
          "sourceParam": "Cylinder",
          "target": "final",
          "targetParam": "Breps B"
        }
      ]
    },
    {
      "name": "Organic Lattice",
      "description": "Creates an organic lattice structure using mesh and smoothing",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "basePlane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "density",
          "settings": {
            "min": 8,
            "max": 25,
            "value": 15
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "randomness",
          "settings": {
            "min": 0,
            "max": 5,
            "value": 2
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 300,
          "id": "smoothing",
          "settings": {
            "min": 0,
            "max": 1,
            "value": 0.5
          }
        },
        {
          "type": "Populate 2D",
          "x": 300,
          "y": 150,
          "id": "randomPoints"
        },
        {
          "type": "Random",
          "x": 300,
          "y": 250,
          "id": "heightValues"
        },
        {
          "type": "Vector XYZ",
          "x": 500,
          "y": 200,
          "id": "heightVectors"
        },
        {
          "type": "Move",
          "x": 700,
          "y": 175,
          "id": "liftedPoints"
        },
        {
          "type": "Delaunay Triangulation",
          "x": 900,
          "y": 200,
          "id": "triangulation"
        },
        {
          "type": "Smooth Mesh",
          "x": 1100,
          "y": 225,
          "id": "smoothed"
        }
      ],
      "connections": [
        {
          "source": "density",
          "sourceParam": "Number",
          "target": "randomPoints",
          "targetParam": "Count"
        },
        {
          "source": "density",
          "sourceParam": "Number",
          "target": "heightValues",
          "targetParam": "Count"
        },
        {
          "source": "randomness",
          "sourceParam": "Number",
          "target": "heightValues",
          "targetParam": "Range"
        },
        {
          "source": "randomPoints",
          "sourceParam": "Points",
          "target": "liftedPoints",
          "targetParam": "Geometry"
        },
        {
          "source": "heightValues",
          "sourceParam": "Random",
          "target": "heightVectors",
          "targetParam": "Z"
        },
        {
          "source": "heightVectors",
          "sourceParam": "Vector",
          "target": "liftedPoints",
          "targetParam": "Motion"
        },
        {
          "source": "liftedPoints",
          "sourceParam": "Geometry",
          "target": "triangulation",
          "targetParam": "Points"
        },
        {
          "source": "triangulation",
          "sourceParam": "Mesh",
          "target": "smoothed",
          "targetParam": "Mesh"
        },
        {
          "source": "smoothing",
          "sourceParam": "Number",
          "target": "smoothed",
          "targetParam": "Strength"
        }
      ]
    },
    {
      "name": "Spiral Staircase",
      "description": "Creates a spiral staircase using polar array and loft",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "basePlane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "radius",
          "settings": {
            "min": 8,
            "max": 25,
            "value": 15
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "steps",
          "settings": {
            "min": 12,
            "max": 36,
            "value": 24
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 300,
          "id": "height",
          "settings": {
            "min": 20,
            "max": 60,
            "value": 40
          }
        },
        {
          "type": "Rectangle",
          "x": 300,
          "y": 150,
          "id": "stepProfile"
        },
        {
          "type": "Series",
          "x": 300,
          "y": 250,
          "id": "heightSeries"
        },
        {
          "type": "Vector XYZ",
          "x": 500,
          "y": 200,
          "id": "liftVector"
        },
        {
          "type": "Move",
          "x": 700,
          "y": 175,
          "id": "liftedProfiles"
        },
        {
          "type": "Polar Array",
          "x": 900,
          "y": 200,
          "id": "spiralProfiles"
        },
        {
          "type": "Loft",
          "x": 1100,
          "y": 225,
          "id": "staircase"
        }
      ],
      "connections": [
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "stepProfile",
          "targetParam": "Plane"
        },
        {
          "source": "radius",
          "sourceParam": "Number",
          "target": "stepProfile",
          "targetParam": "X Size"
        },
        {
          "source": "height",
          "sourceParam": "Number",
          "target": "heightSeries",
          "targetParam": "Step"
        },
        {
          "source": "steps",
          "sourceParam": "Number",
          "target": "heightSeries",
          "targetParam": "Count"
        },
        {
          "source": "heightSeries",
          "sourceParam": "Series",
          "target": "liftVector",
          "targetParam": "Z"
        },
        {
          "source": "stepProfile",
          "sourceParam": "Rectangle",
          "target": "liftedProfiles",
          "targetParam": "Geometry"
        },
        {
          "source": "liftVector",
          "sourceParam": "Vector",
          "target": "liftedProfiles",
          "targetParam": "Motion"
        },
        {
          "source": "liftedProfiles",
          "sourceParam": "Geometry",
          "target": "spiralProfiles",
          "targetParam": "Geometry"
        },
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "spiralProfiles",
          "targetParam": "Plane"
        },
        {
          "source": "steps",
          "sourceParam": "Number",
          "target": "spiralProfiles",
          "targetParam": "Count"
        },
        {
          "source": "spiralProfiles",
          "sourceParam": "Geometry",
          "target": "staircase",
          "targetParam": "Curves"
        }
      ]
    },
    {
      "name": "Parametric Facade",
      "description": "Creates a parametric building facade with adaptive panels",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "basePlane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "width",
          "settings": {
            "min": 30,
            "max": 80,
            "value": 50
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "height",
          "settings": {
            "min": 20,
            "max": 60,
            "value": 35
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 300,
          "id": "panelsU",
          "settings": {
            "min": 8,
            "max": 20,
            "value": 12
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 350,
          "id": "panelsV",
          "settings": {
            "min": 6,
            "max": 15,
            "value": 8
          }
        },
        {
          "type": "Plane Surface",
          "x": 300,
          "y": 175,
          "id": "baseSurface"
        },
        {
          "type": "Isotrim",
          "x": 500,
          "y": 200,
          "id": "panelSurfaces"
        },
        {
          "type": "Evaluate Surface",
          "x": 700,
          "y": 175,
          "id": "panelCenters"
        },
        {
          "type": "Random",
          "x": 500,
          "y": 300,
          "id": "randomOffsets"
        },
        {
          "type": "Multiplication",
          "x": 700,
          "y": 275,
          "id": "scaledOffsets"
        },
        {
          "type": "Move",
          "x": 900,
          "y": 200,
          "id": "offsetPanels"
        }
      ],
      "connections": [
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "baseSurface",
          "targetParam": "Plane"
        },
        {
          "source": "width",
          "sourceParam": "Number",
          "target": "baseSurface",
          "targetParam": "X Size"
        },
        {
          "source": "height",
          "sourceParam": "Number",
          "target": "baseSurface",
          "targetParam": "Y Size"
        },
        {
          "source": "baseSurface",
          "sourceParam": "Surface",
          "target": "panelSurfaces",
          "targetParam": "Surface"
        },
        {
          "source": "panelSurfaces",
          "sourceParam": "Surface",
          "target": "panelCenters",
          "targetParam": "Surface"
        },
        {
          "source": "panelsU",
          "sourceParam": "Number",
          "target": "randomOffsets",
          "targetParam": "Count"
        },
        {
          "source": "randomOffsets",
          "sourceParam": "Random",
          "target": "scaledOffsets",
          "targetParam": "A"
        },
        {
          "source": "panelCenters",
          "sourceParam": "Normal",
          "target": "scaledOffsets",
          "targetParam": "B"
        },
        {
          "source": "panelSurfaces",
          "sourceParam": "Surface",
          "target": "offsetPanels",
          "targetParam": "Geometry"
        },
        {
          "source": "scaledOffsets",
          "sourceParam": "Result",
          "target": "offsetPanels",
          "targetParam": "Motion"
        }
      ]
    },
    {
      "name": "Tensioned Membrane",
      "description": "Creates a tensioned membrane structure using boundary curves and patch",
      "components": [
        {
          "type": "XY Plane",
          "x": 100,
          "y": 100,
          "id": "basePlane"
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 200,
          "id": "size",
          "settings": {
            "min": 20,
            "max": 60,
            "value": 40
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 250,
          "id": "points",
          "settings": {
            "min": 6,
            "max": 16,
            "value": 10
          }
        },
        {
          "type": "Number Slider",
          "x": 100,
          "y": 300,
          "id": "height",
          "settings": {
            "min": 5,
            "max": 25,
            "value": 12
          }
        },
        {
          "type": "Circle",
          "x": 300,
          "y": 150,
          "id": "boundaryCircle"
        },
        {
          "type": "Divide Curve",
          "x": 500,
          "y": 175,
          "id": "boundaryPoints"
        },
        {
          "type": "Random",
          "x": 300,
          "y": 300,
          "id": "randomHeights"
        },
        {
          "type": "Vector XYZ",
          "x": 500,
          "y": 275,
          "id": "heightVectors"
        },
        {
          "type": "Move",
          "x": 700,
          "y": 200,
          "id": "controlPoints"
        },
        {
          "type": "Patch",
          "x": 900,
          "y": 225,
          "id": "membrane"
        }
      ],
      "connections": [
        {
          "source": "basePlane",
          "sourceParam": "Plane",
          "target": "boundaryCircle",
          "targetParam": "Plane"
        },
        {
          "source": "size",
          "sourceParam": "Number",
          "target": "boundaryCircle",
          "targetParam": "Radius"
        },
        {
          "source": "boundaryCircle",
          "sourceParam": "Circle",
          "target": "boundaryPoints",
          "targetParam": "Curve"
        },
        {
          "source": "points",
          "sourceParam": "Number",
          "target": "boundaryPoints",
          "targetParam": "Count"
        },
        {
          "source": "points",
          "sourceParam": "Number",
          "target": "randomHeights",
          "targetParam": "Count"
        },
        {
          "source": "height",
          "sourceParam": "Number",
          "target": "randomHeights",
          "targetParam": "Range"
        },
        {
          "source": "randomHeights",
          "sourceParam": "Random",
          "target": "heightVectors",
          "targetParam": "Z"
        },
        {
          "source": "boundaryPoints",
          "sourceParam": "Points",
          "target": "controlPoints",
          "targetParam": "Geometry"
        },
        {
          "source": "heightVectors",
          "sourceParam": "Vector",
          "target": "controlPoints",
          "targetParam": "Motion"
        },
        {
          "source": "boundaryCircle",
          "sourceParam": "Circle",
          "target": "membrane",
          "targetParam": "Curves"
        },
        {
          "source": "controlPoints",
          "sourceParam": "Geometry",
          "target": "membrane",
          "targetParam": "Points"
        }
      ]
    },
    {
      "name": "SubD Smooth Mesh",
      "description": "Convert a mesh to a smooth subdivision surface",
      "components": [
        {
          "id": "mesh1",
          "type": "Mesh"
        },
        {
          "id": "subd1",
          "type": "SubD From Mesh"
        },
        {
          "id": "subdivide1",
          "type": "SubD Subdivide"
        },
        {
          "id": "slider1",
          "type": "Number Slider"
        }
      ],
      "connections": [
        {
          "source": "mesh1",
          "sourceParam": "Mesh",
          "target": "subd1",
          "targetParam": "Mesh"
        },
        {
          "source": "subd1",
          "sourceParam": "SubD",
          "target": "subdivide1",
          "targetParam": "SubD"
        },
        {
          "source": "slider1",
          "sourceParam": "Number",
          "target": "subdivide1",
          "targetParam": "Level"
        }
      ]
    },
    {
      "name": "Data Flow Control",
      "description": "Control data flow with manual update using Data Dam",
      "components": [
        {
          "id": "input1",
          "type": "Panel"
        },
        {
          "id": "dam1",
          "type": "Data Dam"
        },
        {
          "id": "output1",
          "type": "Panel"
        }
      ],
      "connections": [
        {
          "source": "input1",
          "sourceParam": "Text",
          "target": "dam1",
          "targetParam": "Data"
        },
        {
          "source": "dam1",
          "sourceParam": "Data",
          "target": "output1",
          "targetParam": "Text"
        }
      ]
    },
    {
      "name": "Surface Analysis Setup",
      "description": "Analyze surface properties including curvature",
      "components": [
        {
          "id": "surface1",
          "type": "Surface",
          "isUserInput": true
        },
        {
          "id": "analysis1",
          "type": "Surface Area"
        },
        {
          "id": "curvature1",
          "type": "Surface Curvature"
        },
        {
          "id": "uSlider",
          "type": "Number Slider"
        },
        {
          "id": "vSlider",
          "type": "Number Slider"
        }
      ],
      "connections": [
        {
          "source": "surface1",
          "sourceParam": "Surface",
          "target": "analysis1",
          "targetParam": "Surface"
        },
        {
          "source": "surface1",
          "sourceParam": "Surface",
          "target": "curvature1",
          "targetParam": "Surface"
        },
        {
          "source": "uSlider",
          "sourceParam": "Number",
          "target": "curvature1",
          "targetParam": "U"
        },
        {
          "source": "vSlider",
          "sourceParam": "Number",
          "target": "curvature1",
          "targetParam": "V"
        }
      ]
    },
    {
      "name": "Python Script Processing",
      "description": "Process data using Python script",
      "components": [
        {
          "id": "input1",
          "type": "Panel"
        },
        {
          "id": "script1",
          "type": "Python Script"
        },
        {
          "id": "output1",
          "type": "Panel"
        }
      ],
      "connections": [
        {
          "source": "input1",
          "sourceParam": "Text",
          "target": "script1",
          "targetParam": "x"
        },
        {
          "source": "script1",
          "sourceParam": "a",
          "target": "output1",
          "targetParam": "Text"
        }
      ]
    },
    {
      "name": "Animated Timer Setup",
      "description": "Create animated updates using Timer",
      "components": [
        {
          "id": "toggle1",
          "type": "Boolean Toggle"
        },
        {
          "id": "timer1",
          "type": "Trigger"
        },
        {
          "id": "slider1",
          "type": "Number Slider"
        },
        {
          "id": "math1",
          "type": "Addition"
        }
      ],
      "connections": [
        {
          "source": "toggle1",
          "sourceParam": "Boolean",
          "target": "timer1",
          "targetParam": "Run"
        },
        {
          "source": "timer1",
          "sourceParam": "Time",
          "target": "math1",
          "targetParam": "A"
        },
        {
          "source": "slider1",
          "sourceParam": "Number",
          "target": "math1",
          "targetParam": "B"
        }
      ]
    },
    {
      "name": "3D Voronoi Cells",
      "description": "Create 3D Voronoi cells from points",
      "components": [
        {
          "id": "populate1",
          "type": "Populate 3D"
        },
        {
          "id": "box1",
          "type": "Box"
        },
        {
          "id": "voronoi1",
          "type": "Voronoi 3D"
        },
        {
          "id": "count1",
          "type": "Number Slider"
        }
      ],
      "connections": [
        {
          "source": "box1",
          "sourceParam": "Box",
          "target": "populate1",
          "targetParam": "Box"
        },
        {
          "source": "count1",
          "sourceParam": "Number",
          "target": "populate1",
          "targetParam": "Count"
        },
        {
          "source": "populate1",
          "sourceParam": "Points",
          "target": "voronoi1",
          "targetParam": "Points"
        },
        {
          "source": "box1",
          "sourceParam": "Box",
          "target": "voronoi1",
          "targetParam": "Box"
        }
      ]
    },
    {
      "name": "Stream Filter Logic",
      "description": "Filter data streams based on conditions",
      "components": [
        {
          "id": "data1",
          "type": "Panel"
        },
        {
          "id": "data2",
          "type": "Panel"
        },
        {
          "id": "gate1",
          "type": "Number Slider"
        },
        {
          "id": "filter1",
          "type": "Stream Filter"
        },
        {
          "id": "output1",
          "type": "Panel"
        }
      ],
      "connections": [
        {
          "source": "gate1",
          "sourceParam": "Number",
          "target": "filter1",
          "targetParam": "Gate"
        },
        {
          "source": "data1",
          "sourceParam": "Text",
          "target": "filter1",
          "targetParam": "Stream 0"
        },
        {
          "source": "data2",
          "sourceParam": "Text",
          "target": "filter1",
          "targetParam": "Stream 1"
        },
        {
          "source": "filter1",
          "sourceParam": "Stream",
          "target": "output1",
          "targetParam": "Text"
        }
      ]
    },
    {
      "name": "Contour Analysis",
      "description": "Create contour lines from geometry",
      "components": [
        {
          "id": "geom1",
          "type": "Surface",
          "isUserInput": true
        },
        {
          "id": "point1",
          "type": "Point"
        },
        {
          "id": "vector1",
          "type": "Unit Z"
        },
        {
          "id": "distance1",
          "type": "Number Slider"
        },
        {
          "id": "contour1",
          "type": "Contour"
        }
      ],
      "connections": [
        {
          "source": "geom1",
          "sourceParam": "Surface",
          "target": "contour1",
          "targetParam": "Geometry"
        },
        {
          "source": "point1",
          "sourceParam": "Pt",
          "target": "contour1",
          "targetParam": "Point"
        },
        {
          "source": "vector1",
          "sourceParam": "Unit vector",
          "target": "contour1",
          "targetParam": "Normal"
        },
        {
          "source": "distance1",
          "sourceParam": "Number",
          "target": "contour1",
          "targetParam": "Distance"
        }
      ]
    },
    {
      "name": "Loft Surface",
      "description": "Create a surface by lofting through curves",
      "components": [
        {
          "id": "curves",
          "type": "Curve",
          "x": 100,
          "y": 100,
          "isUserInput": true
        },
        {
          "id": "loft",
          "type": "Loft",
          "x": 300,
          "y": 100
        }
      ],
      "connections": [
        {
          "source": "curves",
          "sourceParam": "Curve",
          "target": "loft",
          "targetParam": "Curves"
        }
      ]
    },
    {
      "name": "Sweep Geometry",
      "description": "Create geometry by sweeping a profile along a rail",
      "components": [
        {
          "id": "rail",
          "type": "Curve",
          "x": 100,
          "y": 100,
          "isUserInput": true
        },
        {
          "id": "profile",
          "type": "Curve",
          "x": 100,
          "y": 200,
          "isUserInput": true
        },
        {
          "id": "sweep",
          "type": "Sweep 1",
          "x": 300,
          "y": 150
        }
      ],
      "connections": [
        {
          "source": "rail",
          "sourceParam": "Curve",
          "target": "sweep",
          "targetParam": "Rail"
        },
        {
          "source": "profile",
          "sourceParam": "Curve",
          "target": "sweep",
          "targetParam": "Profiles"
        }
      ]
    },
    {
      "name": "Curve Intersection",
      "description": "Find intersection points between curves",
      "components": [
        {
          "id": "curveA",
          "type": "Curve",
          "x": 100,
          "y": 100,
          "isUserInput": true
        },
        {
          "id": "curveB",
          "type": "Curve",
          "x": 100,
          "y": 200,
          "isUserInput": true
        },
        {
          "id": "intersect",
          "type": "Curve | Curve",
          "x": 300,
          "y": 150
        }
      ],
      "connections": [
        {
          "source": "curveA",
          "sourceParam": "Curve",
          "target": "intersect",
          "targetParam": "Curve A"
        },
        {
          "source": "curveB",
          "sourceParam": "Curve",
          "target": "intersect",
          "targetParam": "Curve B"
        }
      ]
    },
    {
      "name": "Delaunay Mesh",
      "description": "Create Delaunay triangulation from points",
      "components": [
        {
          "id": "points",
          "type": "Point",
          "x": 100,
          "y": 100
        },
        {
          "id": "delaunay",
          "type": "Delaunay Triangulation",
          "x": 300,
          "y": 100
        }
      ],
      "connections": [
        {
          "source": "points",
          "sourceParam": "Pt",
          "target": "delaunay",
          "targetParam": "Points"
        }
      ]
    },
    {
      "name": "Convex Hull",
      "description": "Create convex hull from points",
      "components": [
        {
          "id": "points",
          "type": "Point",
          "x": 100,
          "y": 100
        },
        {
          "id": "hull",
          "type": "Convex Hull",
          "x": 300,
          "y": 100
        }
      ],
      "connections": [
        {
          "source": "points",
          "sourceParam": "Pt",
          "target": "hull",
          "targetParam": "Points"
        }
      ]
    },
    {
      "name": "Linear Array",
      "description": "Create linear array of geometry",
      "components": [
        {
          "id": "geometry",
          "type": "Geometry",
          "x": 100,
          "y": 100,
          "isUserInput": true
        },
        {
          "id": "vector",
          "type": "Vector XYZ",
          "x": 100,
          "y": 200
        },
        {
          "id": "count",
          "type": "Number Slider",
          "x": 100,
          "y": 300
        },
        {
          "id": "array",
          "type": "Linear Array",
          "x": 300,
          "y": 150
        }
      ],
      "connections": [
        {
          "source": "geometry",
          "sourceParam": "Geometry",
          "target": "array",
          "targetParam": "Geometry"
        },
        {
          "source": "vector",
          "sourceParam": "Vector",
          "target": "array",
          "targetParam": "Direction"
        },
        {
          "source": "count",
          "sourceParam": "Number",
          "target": "array",
          "targetParam": "Count"
        }
      ]
    },
    {
      "name": "Polar Array",
      "description": "Create polar array of geometry",
      "components": [
        {
          "id": "geometry",
          "type": "Geometry",
          "x": 100,
          "y": 100,
          "isUserInput": true
        },
        {
          "id": "plane",
          "type": "XY Plane",
          "x": 100,
          "y": 200
        },
        {
          "id": "count",
          "type": "Number Slider",
          "x": 100,
          "y": 300
        },
        {
          "id": "array",
          "type": "Polar Array",
          "x": 300,
          "y": 150
        }
      ],
      "connections": [
        {
          "source": "geometry",
          "sourceParam": "Geometry",
          "target": "array",
          "targetParam": "Geometry"
        },
        {
          "source": "plane",
          "sourceParam": "Plane",
          "target": "array",
          "targetParam": "Plane"
        },
        {
          "source": "count",
          "sourceParam": "Number",
          "target": "array",
          "targetParam": "Count"
        }
      ]
    },
    {
      "name": "Random Population",
      "description": "Populate area with random points",
      "components": [
        {
          "id": "boundary",
          "type": "Rectangle",
          "x": 100,
          "y": 100
        },
        {
          "id": "count",
          "type": "Number Slider",
          "x": 100,
          "y": 200
        },
        {
          "id": "populate",
          "type": "Populate 2D",
          "x": 300,
          "y": 150
        }
      ],
      "connections": [
        {
          "source": "boundary",
          "sourceParam": "Rectangle",
          "target": "populate",
          "targetParam": "Region"
        },
        {
          "source": "count",
          "sourceParam": "Number",
          "target": "populate",
          "targetParam": "Count"
        }
      ]
    },
    {
      "name": "Revolution Geometry",
      "description": "Create geometry by revolving a profile",
      "components": [
        {
          "id": "profile",
          "type": "Curve",
          "x": 100,
          "y": 100,
          "isUserInput": true
        },
        {
          "id": "axis",
          "type": "Line",
          "x": 100,
          "y": 200
        },
        {
          "id": "angle",
          "type": "Number Slider",
          "x": 100,
          "y": 300
        },
        {
          "id": "revolve",
          "type": "Revolve",
          "x": 300,
          "y": 150
        }
      ],
      "connections": [
        {
          "source": "profile",
          "sourceParam": "Curve",
          "target": "revolve",
          "targetParam": "Curve"
        },
        {
          "source": "axis",
          "sourceParam": "Line",
          "target": "revolve",
          "targetParam": "Axis"
        },
        {
          "source": "angle",
          "sourceParam": "Number",
          "target": "revolve",
          "targetParam": "Angle"
        }
      ]
    },
    {
      "name": "Offset Geometry",
      "description": "Create offset geometry",
      "components": [
        {
          "id": "geometry",
          "type": "Curve",
          "x": 100,
          "y": 100,
          "isUserInput": true
        },
        {
          "id": "distance",
          "type": "Number Slider",
          "x": 100,
          "y": 200
        },
        {
          "id": "offset",
          "type": "Offset Curve",
          "x": 300,
          "y": 150
        }
      ],
      "connections": [
        {
          "source": "geometry",
          "sourceParam": "Curve",
          "target": "offset",
          "targetParam": "Curve"
        },
        {
          "source": "distance",
          "sourceParam": "Number",
          "target": "offset",
          "targetParam": "Distance"
        }
      ]
    }
  ],
  "intents": [
    {
      "keywords": [
        "box",
        "cube",
        "rectangular",
        "prism",
        "cuboid"
      ],
      "pattern": "3D Box",
      "priority": 5
    },
    {
      "keywords": [
        "voronoi",
        "cell",
        "diagram",
        "3d",
        "cellular",
        "tessellation"
      ],
      "pattern": "3D Voronoi",
      "priority": 6
    },
    {
      "keywords": [
        "circle",
        "round",
        "disc"
      ],
      "pattern": "Circle",
      "priority": 3
    },
    {
      "keywords": [
        "sphere",
        "ball",
        "3d",
        "geometry",
        "round",
        "globe",
        "spherical"
      ],
      "pattern": "Sphere",
      "priority": 7
    },
    {
      "keywords": [
        "cylinder",
        "tower",
        "column",
        "tube",
        "pipe"
      ],
      "pattern": "Cylinder Tower",
      "priority": 5
    },
    {
      "keywords": [
        "grid",
        "array",
        "points",
        "parametric",
        "pattern",
        "point",
        "matrix",
        "regular"
      ],
      "pattern": "Parametric Grid",
      "priority": 8
    },
    {
      "keywords": [
        "transform",
        "move",
        "translate",
        "box",
        "shifted",
        "moved",
        "scaled",
        "rotated"
      ],
      "pattern": "Transformed Box",
      "priority": 8
    },
    {
      "keywords": [
        "math",
        "add",
        "multiply",
        "arithmetic",
        "calculation"
      ],
      "pattern": "Math Operations",
      "priority": 5
    },
    {
      "keywords": [
        "line",
        "connect",
        "between",
        "points",
        "straight"
      ],
      "pattern": "Line Between Points",
      "priority": 5
    },
    {
      "keywords": [
        "divide",
        "circle",
        "points",
        "division",
        "split",
        "divided",
        "segments"
      ],
      "pattern": "Divided Circle",
      "priority": 7
    },
    {
      "keywords": [
        "surface",
        "parametric",
        "nurbs",
        "grid",
        "random"
      ],
      "pattern": "Parametric Surface",
      "priority": 5
    },
    {
      "keywords": [
        "tower",
        "twist",
        "twisted",
        "spiral",
        "rotation"
      ],
      "pattern": "Twisted Tower",
      "priority": 5
    },
    {
      "keywords": [
        "hexagon",
        "pavilion",
        "structure",
        "hex",
        "architecture"
      ],
      "pattern": "Hexagonal Pavilion",
      "priority": 5
    },
    {
      "keywords": [
        "wave",
        "sine",
        "trigonometric",
        "function",
        "undulation"
      ],
      "pattern": "Parametric Wave",
      "priority": 5
    },
    {
      "keywords": [
        "boolean",
        "architecture",
        "difference",
        "subtract",
        "complex",
        "union",
        "intersection"
      ],
      "pattern": "Boolean Architecture",
      "priority": 7
    },
    {
      "keywords": [
        "organic",
        "lattice",
        "mesh",
        "smooth",
        "natural",
        "network",
        "structure"
      ],
      "pattern": "Organic Lattice",
      "priority": 7
    },
    {
      "keywords": [
        "staircase",
        "spiral",
        "stairs",
        "helix",
        "circulation"
      ],
      "pattern": "Spiral Staircase",
      "priority": 5
    },
    {
      "keywords": [
        "facade",
        "building",
        "panels",
        "adaptive",
        "parametric"
      ],
      "pattern": "Parametric Facade",
      "priority": 5
    },
    {
      "keywords": [
        "membrane",
        "tensioned",
        "tension",
        "fabric",
        "structural"
      ],
      "pattern": "Tensioned Membrane",
      "priority": 5
    },
    {
      "keywords": [
        "array",
        "linear",
        "copy",
        "repeat",
        "duplicate"
      ],
      "pattern": "Linear Array",
      "priority": 5
    },
    {
      "keywords": [
        "polar",
        "radial",
        "circular",
        "rotate",
        "around"
      ],
      "pattern": "Polar Array",
      "priority": 5
    },
    {
      "keywords": [
        "loft",
        "surface",
        "curves",
        "blend",
        "smooth"
      ],
      "pattern": "Loft Surface",
      "priority": 5
    },
    {
      "keywords": [
        "sweep",
        "rail",
        "profile",
        "extrude",
        "path"
      ],
      "pattern": "Sweep Geometry",
      "priority": 5
    },
    {
      "keywords": [
        "intersect",
        "intersection",
        "curve",
        "line",
        "meet",
        "cross"
      ],
      "pattern": "Curve Intersection",
      "priority": 6
    },
    {
      "keywords": [
        "triangulation",
        "delaunay",
        "mesh",
        "points",
        "triangulate"
      ],
      "pattern": "Delaunay Mesh",
      "priority": 5
    },
    {
      "keywords": [
        "hull",
        "convex",
        "boundary",
        "envelope",
        "outer"
      ],
      "pattern": "Convex Hull",
      "priority": 5
    },
    {
      "keywords": [
        "populate",
        "random",
        "points",
        "distribute",
        "scatter"
      ],
      "pattern": "Random Population",
      "priority": 5
    },
    {
      "keywords": [
        "revolve",
        "rotation",
        "axis",
        "circular",
        "lathe"
      ],
      "pattern": "Revolution Geometry",
      "priority": 5
    },
    {
      "keywords": [
        "offset",
        "distance",
        "parallel",
        "inset",
        "outset"
      ],
      "pattern": "Offset Geometry",
      "priority": 5
    },
    {
      "keywords": [
        "smooth",
        "subdivision",
        "subd",
        "mesh",
        "organic"
      ],
      "pattern": "SubD Smooth Mesh",
      "priority": 5
    },
    {
      "keywords": [
        "data",
        "dam",
        "control",
        "flow",
        "manual",
        "update"
      ],
      "pattern": "Data Flow Control",
      "priority": 6
    },
    {
      "keywords": [
        "surface",
        "analysis",
        "curvature",
        "gaussian",
        "mean"
      ],
      "pattern": "Surface Analysis Setup",
      "priority": 5
    },
    {
      "keywords": [
        "python",
        "script",
        "code",
        "programming"
      ],
      "pattern": "Python Script Processing",
      "priority": 4
    },
    {
      "keywords": [
        "timer",
        "animate",
        "animation",
        "time",
        "update"
      ],
      "pattern": "Animated Timer Setup",
      "priority": 5
    },
    {
      "keywords": [
        "3d",
        "voronoi",
        "cells",
        "volumetric",
        "partition",
        "cellular"
      ],
      "pattern": "3D Voronoi Cells",
      "priority": 6
    },
    {
      "keywords": [
        "stream",
        "filter",
        "gate",
        "switch",
        "select"
      ],
      "pattern": "Stream Filter Logic",
      "priority": 5
    },
    {
      "keywords": [
        "contour",
        "lines",
        "section",
        "slice",
        "topography"
      ],
      "pattern": "Contour Analysis",
      "priority": 5
    }
  ]
}